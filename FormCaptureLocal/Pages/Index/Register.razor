@layout IndexLayout
@inject IJSRuntime IJSRuntime
@inject NavigationManager NavigationManager
@page "/register"

<h3><span class="oi oi-person"></span> Create an account</h3>

<div class="form-card">
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" @bind-value="model.User.Email" placeholder="Enter your email..." class="form-control" id="email" name="email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" @bind-value="model.Password" placeholder="Enter your password..." class="form-control" id="password" name="password" />
    </div>

    <div class="form-group">
        <label for="confirm-password">Confirm password:</label>
        <input type="password" @bind-value="model.ConfirmationPassword" placeholder="Confirm your password..." class="form-control" id="confirm-password" name="confirm-password" />
    </div>

    <button @onclick="SubmitForm" id="submitButton" class="btn btn-outline-primary" disabled="@isSubmitButtonDisabled"><span class="oi oi-check mr-2"></span>Submit</button>

    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary @LoadingIndicatorCssClass" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>

<div class="alert alert-danger form-alert d-none mt-4 @ErrorAlertCssClass" role="alert" id="registration-error-display">
    @errorMessage
</div>

@code
{
    private RegistrationModel model = new RegistrationModel() { User = new User() };

    private bool isLoadingIndicatorHidden = true;

    private bool isErrorAlertHidden = true;

    private string LoadingIndicatorCssClass => isLoadingIndicatorHidden ? "d-none" : null;

    private string ErrorAlertCssClass => isErrorAlertHidden ? "d-none" : "d-block";

    private bool isSubmitButtonDisabled = false;

    private string errorMessage;

    private async Task SubmitForm()
    {
        isSubmitButtonDisabled = true;
        isLoadingIndicatorHidden = false;

        if (!string.IsNullOrEmpty(model.User.Email) && !string.IsNullOrEmpty(model.Password) && !string.IsNullOrEmpty(model.ConfirmationPassword) && model.Password.Equals(model.ConfirmationPassword))
        {
            model.User.PasswordSalt = Guid.NewGuid().ToString();
            model.User.PasswordHash = await IJSRuntime.InvokeAsync<string>("hashString", model.Password, model.User.PasswordSalt);
            var res = await IJSRuntime.InvokeAsync<bool>("addItem", model.User, "Users");
            if (res)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "User is already registered.";
                isErrorAlertHidden = false;
            }
        }
        else
        {
            errorMessage = "Registration form wasn't properly completed.";
            isErrorAlertHidden = false;
        }

        isLoadingIndicatorHidden = true;
        isSubmitButtonDisabled = false;
    }
}