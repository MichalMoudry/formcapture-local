@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject IStringLocalizer<App> Localizer
@page "/formcapture/workflows/edit/{workflowID}"

@if (workflow != null)
{
    <h3><span class="fluentUiGlyph tableFluentGlyph h3FluentGlyph mr-2">&#xEA39;</span> @Localizer["WorkflowsEditPageTitle"] '@workflow.Name'</h3>
}
else
{
    <h3>@Localizer["Loading"]...</h3>
}

<div class="form-group">
    <label for="workflow-name">@Localizer["WorkflowNameInputLabel"]:</label>
    @if (workflow != null)
    {
        <input name="workflow-name" @bind-value="workflow.Name" placeholder="@Localizer["WorkflowNameInputPlaceholder"]..." id="workflow-name" type="text" class="form-control" />
    }
</div>

<!--Scan tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph workflowPagesH4Glyph h4FluentGlyph mr-2">&#xEA00;</span> @Localizer["ScanTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings != null)
        {
            @if (groupings["scan"].Count != 0)
            {
                @foreach (WorkflowTaskGrouping grouping in groupings["scan"])
                {
                    <p class="card-text">
                        <span class="badge badge-success">
                            @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings["scan"], grouping))"></span>
                        </span>
                    </p>
                }
            }
            else
            {
                <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
            }
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup("scan"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsScanTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Recognition tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph workflowPagesH4Glyph mr-2">&#xEB4E;</span> @Localizer["RecognitionTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings != null)
        {
            @if (groupings["recognition"].Count != 0)
            {
                @foreach (WorkflowTaskGrouping grouping in groupings["recognition"])
                {
                    <p class="card-text">
                        <span class="badge badge-success">
                            @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings["recognition"], grouping))"></span>
                        </span>
                    </p>
                }
            }
            else
            {
                <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
            }
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup("recognition"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsRecognitionTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Verification tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph workflowPagesH4Glyph mr-2">&#xE969;</span> @Localizer["VerificationTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings != null)
        {
            @if (groupings["verification"].Count != 0)
            {
                @foreach (WorkflowTaskGrouping grouping in groupings["verification"])
                {
                    <p class="card-text">
                        <span class="badge badge-success">
                            @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings["verification"], grouping))"></span>
                        </span>
                    </p>
                }
            }
            else
            {
                <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
            }
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup("verification"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsVerificationTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Export tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph workflowPagesH4Glyph mr-2">&#xE9B9;</span> @Localizer["ExportTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings != null)
        {
            @if (groupings["export"].Count != 0)
            {
                @foreach (WorkflowTaskGrouping grouping in groupings["export"])
                {
                    <p class="card-text">
                        <span class="badge badge-success">
                            @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings["export"], grouping))"></span>
                        </span>
                    </p>
                }
            }
            else
            {
                <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
            }
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup("export"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsExportTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<div class="mt-4 mb-4">
    <button type="button" class="btn btn-outline-success" @onclick="Submit" title="@Localizer["WorkflowsAddSubmitButtonTitle"]">
        <span class="oi oi-check"></span> @Localizer["Submit"]
    </button>
</div>

<div class="toast-area">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="workflow-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["Error"]</strong>
        <hr />
        <p>@errorMessage.</p>
        <button type="button" class="close" onclick="closeAlert('workflow-error-toast');" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

<!--Modal for adding tasks-->
<div class="modal" id="add-tasks-dialog" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Localizer["AddTasksToGroupModalTitlePart1"] @currentTaskGroup @Localizer["AddTasksToGroupModalTitlePart2"]</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                @if (tasks == null)
                {
                    <p>@Localizer["Loading"]...</p>
                }
                else
                {
                    @if (tasks.Count != 0)
                    {
                        <form>
                            <fieldset class="form-group">
                                @foreach (WorkflowTask task in tasks)
                                {
                                    <div class="form-check mt-2">
                                        <input class="form-check-input" @onchange="eventArgs => { CheckboxClicked(task, eventArgs.Value); }" type="checkbox" id="@task.ID" />
                                        <label class="form-check-label pointer w-100" for="@task.ID">@task.Name</label>
                                    </div>
                                }
                            </fieldset>
                        </form>
                    }
                    else
                    {
                        <p>
                            @Localizer["AddTasksToGroupModalNoTasksMessage"] <a href="/formcapture/tasks/add" title="@Localizer["AddTaskLinkTitle"]"><span class="oi oi-external-link"></span> @Localizer["AddTaskLinkTitle"]</a>
                        </p>
                    }
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="ConfirmModal" title="@Localizer["Submit"]">
                    <span class="oi oi-check mr-1"></span> @Localizer["Submit"]
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal" title="@Localizer["Close"]">
                    <span class="oi oi-x mr-1"></span> @Localizer["Close"]
                </button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string WorkflowID { get; set; }

    /// <summary>
    /// Field that contains groupings for each workflow group.
    /// </summary>
    private Dictionary<string, List<WorkflowTaskGrouping>> groupings;

    /// <summary>
    /// Field that contains all user's tasks.
    /// </summary>
    private List<WorkflowTask> tasks;

    private string currentTaskGroup;

    private List<WorkflowTask> addedTasks;

    private Workflow workflow;

    private string errorMessage;

    private List<WorkflowTaskGrouping> groupingsToDelete = new List<WorkflowTaskGrouping>();

    private List<WorkflowTaskGrouping> groupingsToAdd = new List<WorkflowTaskGrouping>();

    private void SetCurrentTaskGroup(string taskGroup)
    {
        currentTaskGroup = taskGroup;
        addedTasks = new List<WorkflowTask>();
    }

    private void CheckboxClicked(WorkflowTask task, object value)
    {
        if ((bool)value)
        {
            addedTasks.Add(task);
        }
        else
        {
            addedTasks.Remove(task);
        }
    }

    private void RemoveTaskFromGrouping(List<WorkflowTaskGrouping> groupings, WorkflowTaskGrouping grouping)
    {
        groupings.Remove(grouping);
        groupingsToDelete.Add(grouping);
    }

    private async Task ConfirmModal()
    {
        var ids = new List<string>();
        WorkflowTaskGrouping grouping;
        foreach (WorkflowTask task in addedTasks)
        {
            grouping = new WorkflowTaskGrouping()
            {
                ID = Guid.NewGuid().ToString(),
                TaskGroupName = currentTaskGroup,
                TaskID = task.ID,
                Added = DateTime.Now,
                Updated = DateTime.Now,
                ExecutionOrderNumber = groupings[currentTaskGroup].IndexOf(groupings[currentTaskGroup].LastOrDefault()) + 1,
                WorkflowID = workflow.ID
            };
            groupings[currentTaskGroup].Add(grouping);
            groupingsToAdd.Add(grouping);
            ids.Add(task.ID);
        }
        await IJSRuntime.InvokeVoidAsync("uncheckCheckboxes", ids);
    }

    /// <summary>
    /// Method for handling of closing modal window.
    /// </summary>
    private async Task CloseModal()
    {
        var ids = new List<string>();
        foreach (WorkflowTask task in addedTasks)
        {
            ids.Add(task.ID);
        }
        await IJSRuntime.InvokeVoidAsync("uncheckCheckboxes", ids);
    }

    /// <summary>
    /// Event handler for submit button.
    /// </summary>
    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(workflow.Name))
        {
            workflow.Updated = DateTime.Now;
            var editWorkflowRes = await IJSRuntime.InvokeAsync<bool>("putItem", workflow, "Workflows");
            var addGroupingsRes = false;
            var deleteGroupingsRes = false;
            //Add all new groupings
            foreach (var grouping in groupingsToAdd)
            {
                addGroupingsRes = await IJSRuntime.InvokeAsync<bool>("addItem", grouping, "WorkflowTaskGroupings");
            }
            //Delete groupings selected by the user
            foreach (var grouping in groupingsToDelete)
            {
                deleteGroupingsRes = await IJSRuntime.InvokeAsync<bool>("deleteItem", grouping.ID, "WorkflowTaskGroupings");
            }
            if (editWorkflowRes && addGroupingsRes)
            {
                NavigationManager.NavigateTo("/formcapture/workflows");
            }
            else
            {
                errorMessage = Localizer["DbError"];
                await IJSRuntime.InvokeVoidAsync("displayToast", "workflow-error-toast");
            }
        }
        else
        {
            errorMessage = Localizer["WorkflowNameEmptyInputErrorMessage"];
            await IJSRuntime.InvokeVoidAsync("displayToast", "workflow-error-toast");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            workflow = await IJSRuntime.InvokeAsync<Workflow>("getItem", WorkflowID, "Workflows");
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/NotFound");
            return;
        }
        tasks = await IJSRuntime.InvokeAsync<List<WorkflowTask>>("getAllItems", "WorkflowTasks");
        var groupingsList = await IJSRuntime.InvokeAsync<List<WorkflowTaskGrouping>>("getAllItems", "WorkflowTaskGroupings");
        if (tasks != null && groupingsList != null && workflow != null)
        {
            groupingsList = groupingsList.Where(i => i.WorkflowID.Equals(WorkflowID)).ToList();
            tasks = tasks.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
            groupings = new Dictionary<string, List<WorkflowTaskGrouping>>();
            groupings.Add("scan", groupingsList.Where(i => i.TaskGroupName.Equals("scan")).OrderBy(i => i.ExecutionOrderNumber).ToList());
            groupings.Add("recognition", groupingsList.Where(i => i.TaskGroupName.Equals("recognition")).OrderBy(i => i.ExecutionOrderNumber).ToList());
            groupings.Add("verification", groupingsList.Where(i => i.TaskGroupName.Equals("verification")).OrderBy(i => i.ExecutionOrderNumber).ToList());
            groupings.Add("export", groupingsList.Where(i => i.TaskGroupName.Equals("export")).OrderBy(i => i.ExecutionOrderNumber).ToList());
        }
    }
}