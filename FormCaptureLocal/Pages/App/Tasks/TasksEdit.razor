@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/tasks/edit/{taskID}"


@if (workflowTask != null)
{
    <h3><span class="oi oi-pencil mr-2"></span> Edit '@workflowTask.Name'</h3>
}
else
{
    <h3>Loading...</h3>
}

<hr />

<div class="form-group settingPanel">
    <label for="task-name"><b>Task name</b>:</label>
    @if (workflowTask != null)
    {
        <input type="text" name="task-name" id="task-name" placeholder="Enter a task name..." @bind-value="workflowTask.Name" class="form-control" />
    }
</div>

<div class="form-group settingPanel mt-4">
    <label for="task-description"><b>Task description</b>:</label>
    @if (workflowTask != null)
    {
        <input type="text" name="task-description" id="task-description" placeholder="Enter a task description..." @bind-value="workflowTask.Description" class="form-control" />
    }
</div>

<div class="form-group settingPanel mt-4">
    <label for="task-content"><b>Task content</b>: <a title="Information"><span class="oi oi-question-mark"></span></a></label>
    <textarea @bind="taskContent" placeholder="Enter task content..." name="task-content" id="task-content" class="form-control">
    </textarea>
</div>

<div class="form-group d-flex">
    <button @onclick="ConfirmForm" class="btn btn-success mr-3 mt-2" title="Confirm values in the form and save the task">
        <span class="oi oi-check"></span> Confirm
    </button>
    <button @onclick="TestTaskContent" class="btn btn-warning mt-2" title="Test contents of the task">
        <span class="oi oi-beaker"></span> Test task
    </button>
</div>

@code
{
    [Parameter]
    public string TaskID { get; set; }

    private WorkflowTask workflowTask;

    /// <summary>
    /// Page field that contains content of the task.
    /// </summary>
    private string taskContent;

    private async void TestTaskContent()
    {
        if (!string.IsNullOrEmpty(taskContent))
        {
            var res = await IJSRuntime.InvokeAsync<bool>("executeJS", taskContent);
        }
    }

    private async Task ConfirmForm()
    {
        if (!string.IsNullOrEmpty(taskContent) && !string.IsNullOrEmpty(workflowTask.Name))
        {
            workflowTask.Content = taskContent;
            workflowTask.Updated = DateTime.Now;
            var res = await IJSRuntime.InvokeAsync<bool>("putItem", workflowTask, "WorkflowTasks");
            if (res)
            {
                NavigationManager.NavigateTo("/formcapture/tasks");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        workflowTask = await IJSRuntime.InvokeAsync<WorkflowTask>("getItem", TaskID, "WorkflowTasks");
        if (workflowTask != null)
        {
            taskContent = workflowTask.Content;
        }
    }
}