@layout AppLayout
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject DataAccess DataAccess
@inject IJSRuntime IJSRuntime
@page "/formcapture/queues/{queueID}/scan"

@if (queue != null)
{
    @if (queue.IsAutomatic)
    {

    }
    else
    {
        <div class="jumbotron">
            <h4 class="display-4"><span class="fluentUiGlyph">&#xEA01;</span>  @Localizer["ScanNoun"]</h4>
            <p class="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
            <hr class="my-4">
            <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>
            <a class="btn btn-outline-primary btn-lg" href="#" role="button">Launch scan task</a>
        </div>

        <img src="@test" />
    }
}
else
{
    <h4>@Localizer["Loading"]...</h4>
}

@code
{
    /// <summary>
    /// ID of a queue that is going to be processed.
    /// </summary>
    [Parameter]
    public string QueueID { get; set; }

    /// <summary>
    /// Queue that is being processed.
    /// </summary>
    private Queue queue;

    /// <summary>
    /// List of processed files (see: <see cref="ProcessedFile"/> class).
    /// </summary>
    private List<ProcessedFile> processedFiles;

    /// <summary>
    /// List of workflow tasks made by the user for scan portion of document processing.
    /// </summary>
    private List<WorkflowTask> customTasks;

    string test;

    /// <summary>
    /// Override of OnInitializedAsync() component method.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            queue = await DataAccess.GetItem<Queue>(QueueID, ObjectStores.Queues.ToString());
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/NotFound");
            return;
        }
        if (queue != null)
        {
            //Get processed files
            processedFiles = await DataAccess.GetItemsAsList<ProcessedFile>(ObjectStores.ProcessedFiles.ToString());
            if (processedFiles != null)
            {
                processedFiles = processedFiles.Where(i => i.QueueID.Equals(QueueID)).ToList();
                foreach (var file in processedFiles)
                {
                    //Console.WriteLine($"data:{file.ContentType};base64,{Convert.ToBase64String(file.Content)}");
                    test = await IJSRuntime.InvokeAsync<string>("convertImageToGreyScale", $"data:{file.ContentType};base64,{Convert.ToBase64String(file.Content)}", file.Xdimension, file.Ydimension);
                }
                //Get workflow-task groupings
                var workflowTaskGroupings = await DataAccess.GetItemsAsList<WorkflowTaskGrouping>(ObjectStores.WorkflowTaskGroupings.ToString());
                //Filter workflow-task groupings that are not part of selected workflow and are not for scan
                workflowTaskGroupings = workflowTaskGroupings
                    .Where(i => i.WorkflowID.Equals(queue.WorkflowID) && i.TaskGroupName.Equals("scan"))
                    .OrderBy(i => i.ExecutionOrderNumber)
                    .ToList();
                if (queue.IsAutomatic)
                {

                }
                else
                {

                }
            }
        }
    }
}