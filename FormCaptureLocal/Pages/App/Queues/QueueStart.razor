@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/queues/start"

<h3><span class="oi oi-play-circle"></span> Start a new queue</h3>

<hr />

<!--File upload-->
<div class="settingPanel">
    <h4><span class="oi oi-data-transfer-upload"></span> Upload files</h4>
    <InputFile multiple OnChange="@FileSelected" title="Select files to process" />
    <!--Files quick preview-->
    <h5 class="mt-3"><span class="oi oi-eye"></span> Queue preview</h5>
    <div id="queueQuickPreview" class="mt-1">
        @foreach (var file in processedFiles)
        {
            <div class="quickPreviewItem mr-3">
                <img src="data:{@file.ContentType};base64,@Convert.ToBase64String(file.Content)" alt="@file.Name" class="quickPreviewImage" draggable="false" />
                <button type="button" class="btn btn-outline-danger removeImageButton" aria-label="Close" title="Remove '@file.Name' image" @onclick="@(e => RemoveFile(file))">
                    <span class="oi oi-trash"></span> Remove
                </button>
            </div>
        }
    </div>
</div>

<!--Worflow selection-->
<div class="settingPanel mt-4">
    <h4><span class="oi oi-project"></span> <b>Optional</b>: Select workflow</h4>
</div>

<!--Locale selection-->
<div class="settingPanel mt-4">
    <h4><span class="oi oi-globe"></span> <b>Optional</b>: Select locale</h4>
</div>

<button class="btn btn-outline-success mt-3 mb-3">
    <span class="oi oi-check"></span> Start the queue
</button>

<div class="toast-area">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="error-toast" role="alert">
        <strong class="mr-auto">Error</strong>
        <hr />
        <p class="errorMessage">@errorMessage</p>
        <button type="button" class="close" onclick="closeAlert('error-toast');" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    //A workflow must be selected.
    private string errorMessage;

    private Queue queue = new Queue() { ID = Guid.NewGuid().ToString() };

    private List<ProcessedFile> processedFiles = new List<ProcessedFile>();

    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0)
        {
            errorMessage = "At least one file must be uploaded.";
            await IJSRuntime.InvokeVoidAsync("displayToast", "error-toast");
            return;
        }
        //System.IO.MemoryStream stream;
        ProcessedFile tempFile;
        byte[] buffer;
        foreach (var file in e.GetMultipleFiles())
        {
            buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            tempFile = new ProcessedFile() { ID = Guid.NewGuid().ToString(), QueueID = queue.ID, Content = buffer, ContentType = file.ContentType, Type = file.ContentType, Name = file.Name, Added = DateTime.Now, Updated = DateTime.Now };
            //tempFile.Content = buffer;
            processedFiles.Add(tempFile);
            //uploadedImagesAsBase64String.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}");
            //using (stream = new System.IO.MemoryStream())
            //{
            //await file.OpenReadStream().CopyToAsync(stream);
            //tempFile.Content = stream.ToArray();
            //processedFiles.Add(tempFile);
            //uploadedImagesAsBase64String.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(tempFile.Content)}");
            //}
        }
    }

    private void RemoveFile(ProcessedFile file)
    {
        processedFiles.Remove(file);
    }
}