@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject IStringLocalizer<App> Localizer
@page "/formcapture/queues"

<h3><span class="fluentUiGlyph tableFluentGlyph h3FluentGlyph mr-2">&#xEB4E;</span> @Localizer["Queues"]</h3>

<hr />

<div class="d-flex">
    <button type="button" class="btn btn-outline-success" @onclick="@(e => Navigate("/formcapture/queues/start"))" title="@Localizer["QueuesListStartQueueButtonText"]">
        <span class="oi oi-play-circle mr-2"></span> @Localizer["QueuesListStartQueueButtonText"]
    </button>
    <div class="dropdown">
        <button type="button" class="btn btn-outline-primary ml-2 dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="sortButton" title="@Localizer["SortButtonTitle"]">
            <span class="oi oi-sort-ascending mr-1"></span> @Localizer["SortButtonText"]
        </button>
        <div class="dropdown-menu" aria-labelledby="sortButton">
            <a class="dropdown-item" href="/formcapture/tasks/#" title="@Localizer["SortButtonSortByNameText"]">
                @Localizer["SortButtonSortByNameText"]
            </a>
            <a class="dropdown-item" href="/formcapture/tasks/#" title="@Localizer["SortButtonSortByDateText"]">
                @Localizer["SortButtonSortByDateText"]
            </a>
            <a class="dropdown-item" href="/formcapture/tasks/#" title="@Localizer["SortButtonSortByLastUpdatedText"]">
                @Localizer["SortButtonSortByLastUpdatedText"]
            </a>
        </div>
    </div>
</div>

<h4 class="mt-3">Unfinished queues</h4>
<div class="table-responsive mt-3">
    <table class="table">
        <thead>
            <tr>
                <td><b>@Localizer["Name"]</b></td>
                <td><b>@Localizer["Added"]</b></td>
                <td><b>@Localizer["LastUpdated"]</b></td>
                <td><b>@Localizer["NextTask"]</b></td>
                <td><b>@Localizer["Delete"]</b></td>
            </tr>
        </thead>
        <tbody>
            @if (queues != null)
            {
                @foreach (var queue in queues)
                {
                    <tr>
                        <td>@queue.Name</td>
                        <td>@queue.Added</td>
                        <td>@queue.Updated</td>
                        <td class="hoverElement pointer">
                            @Localizer[$"{queueTaskValues.GetValue(((int)queue.QueueTask) + 1)}Noun"] <span class="oi oi-chevron-right ml-1"></span>
                        </td>
                        <td class="hoverElement pointer"><span class="fluentUiGlyph tableFluentGlyph">&#xE9ED;</span></td>
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (queues == null)
    {
        <p class="tableText">@Localizer["Loading"]...</p>
    }
    else
    {
        @if (queues.Count <= 0)
        {
            <p class="tableText">@Localizer["QueuesListPageNoQueuesText"]</p>
        }
    }
</div>

<h4>Finished queues</h4>

@code
{
    /// <summary>
    /// List of user's queues.
    /// </summary>
    private List<Queue> queues;

    /// <summary>
    /// Array with values of <see cref="QueueTask"/> enum.
    /// </summary>
    private Array queueTaskValues;

    /// <summary>
    /// Method for navigating to a specified URI.
    /// </summary>
    /// <param name="uri">URI.</param>
    private void Navigate(string uri)
    {
        NavigationManager.NavigateTo(uri);
    }

    /// <summary>
    /// Override of OnInitializedAsync() method.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        queueTaskValues = Enum.GetValues(typeof(QueueTask));
        queues = await IJSRuntime.InvokeAsync<List<Queue>>("getAllItems", "Queues");
        if (queues != null)
        {
            queues = queues.Where(i => i.UserID.Equals(UserHelper.UserID) && !i.QueueTask.Equals(QueueTask.Finished)).ToList();
        }
    }
}