@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject DataAccess DataAccess
@inject AlertService AlertService
@inject IStringLocalizer<App> Localizer
@page "/formcapture/templates/edit/{TemplateID}"

@if (template != null)
{
    <h3><span class="fluentUiGlyph tableFluentGlyph h3FluentGlyph mr-2">&#xE9C3;</span> @Localizer["Edit"] '@template.Name' @Localizer["TemplatesEditPageTitlePart2"]</h3>
}
else
{
    <h3>@Localizer["Loading"]...</h3>
}

<hr />

<div>
    @if (template != null)
    {
        <label for="template-name">@Localizer["TemplateNameInputLabel"]:</label>
        <input name="template-name" @bind-value="template.Name" placeholder="@Localizer["TemplateNameInputPlaceholder"]..." id="template-name" type="text" class="form-control" />
    }
    else
    {
        <p>@Localizer["Loading"]...</p>
    }
</div>

<div class="row mt-3">
    <div class="col-md">
        <div class="card">
            <div class="card-header">
                <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph mr-2">&#xEA83;</span> @Localizer["TemplateImageHeader"]</h4>
            </div>

            <div class="card-body">
                <div id="template-canvas">
                    @if (!string.IsNullOrEmpty(fileContent))
                    {
                        <img id="template-preview-image" draggable="false" src="@fileContent" alt="@Localizer["TemplateImageHeader"]" />
                    }
                    else
                    {
                        <p>@Localizer["Loading"]</p>
                    }
                </div>
            </div>

            <div class="card-footer">
                <InputFile OnChange="@FileSelected" title="@Localizer["InputFileSingleFilesTitle"]" />
            </div>
        </div>
    </div>

    <div class="col-md">
        <div>
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <div class="col">
                            <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph mr-2">&#xE914;</span> @Localizer["Fields"]</h4>
                        </div>
                        <div class="col-1">
                            <span class="oi oi-plus pointer mt-2" @onclick="AddNewField"></span>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div id="field-list">
                        @if (fields != null)
                        {
                            @if (fields.Count > 0)
                            {
                                @foreach (Field field in fields)
                                {
                                    <div class="field-list-item mt-1 pr-3 pl-3 pt-2 pb-2">
                                        <div class="row">
                                            <div class="col">
                                                <input class="field-input" @bind-value="field.Name" placeholder="@Localizer["FieldInputPlaceholder"]..." />
                                            </div>

                                            <div class="col-1 pointer hoverElement text-center rounded" @onclick="@(e => DrawField(field.ID))">
                                                <span class="fluentUiGlyph">&#xE9C3;</span>
                                            </div>

                                            <div class="col-1 pointer hoverElement text-center rounded" @onclick="@(e => RemoveField(field))">
                                                <span class="fluentUiGlyph">&#xE9ED;</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="card-text">@Localizer["TemplatesAddPageNoFieldsMessage"].</p>
                            }
                        }
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph mr-2">&#xEB3B;</span> @Localizer["IdFieldHeader"]</h4>
                </div>

                <div class="card-body">
                    <div class="col">
                        <select class="form-control" @bind="identifyingFieldId" title="@Localizer["SelectIdFieldMessage"]">
                            <option value="none">@Localizer["SelectIdFieldMessage"]</option>
                            @if (fields != null)
                            {
                                @foreach (var field in fields)
                                {
                                    <option value="@field.ID">@field.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div>
                        <div class="col mt-2">
                            <input @bind="expectedValue" name="expected-value" id="expected-value" type="text" placeholder="@Localizer["ExpectedValueInputPlaceholder"]..." class="form-control" />
                        </div>

                        <div class="col mt-2">
                            <button class="btn btn-warning" disabled="@isTestButtonDisabled" @onclick="TestIdFieldRecognition" title="@Localizer["TestIdFieldButtonText"]">
                                <span class="oi oi-beaker mr-1"></span> @Localizer["TestIdFieldButtonText"]
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="mt-3 mb-3">
    <!--@onclick="Confirm"-->
    <button class="btn btn-outline-success mr-2" title="@Localizer["TemplatesEditPageEditButtonTitle"]">
        <span class="oi oi-check mr-1"></span> @Localizer["Edit"]
    </button>

    <button class="btn btn-outline-danger" @onclick="DeleteTemplate" title="@Localizer["Delete"] @Localizer["TemplatesEditPageTitlePart2"]">
        <span class="oi oi-trash mr-1"></span> @Localizer["Delete"] @Localizer["TemplatesEditPageTitlePart2"]
    </button>
</div>

<div class="toast-area mt-3">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="template-name-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageTemplateNameErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageTemplateNameErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('template-name-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="fields-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageFieldsErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageFieldsErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('fields-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="image-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageImageErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageImageErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('image-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="id-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageIdFieldErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageIdFieldErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('id-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="val-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageExpectedValueErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageExpectedValueErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('val-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    [Parameter]
    public string TemplateID { get; set; }

    private Template template;

    private List<Field> fields;

    private Field identifyingField;

    private string fileContent;

    private string expectedValue;

    private bool isTestButtonDisabled = false;

    private string identifyingFieldId;

    private void AddNewField()
    {
        fields.Add(new Field()
        {
            ID = Guid.NewGuid().ToString(),
            Name = "New field",
            Added = DateTime.Now,
            Updated = DateTime.Now,
            IsIdentifying = false,
            TemplateID = template.ID
        });
    }

    private void SetFieldToIdentifying(Field field)
    {
        if (identifyingField != null)
        {
            identifyingField.IsIdentifying = false;
        }
        field.IsIdentifying = true;
        identifyingField = field;
    }

    private void RemoveField(Field field)
    {
        fields.Remove(field);
    }

    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 1)
        {
            return;
        }
        fileContent = $"data:{e.File.ContentType};base64,";
        var buffer = new byte[e.File.Size];
        template.ContentType = e.File.ContentType;
        await e.File.OpenReadStream().ReadAsync(buffer);
        template.Image = buffer;
        fileContent += Convert.ToBase64String(buffer);
    }

    private async Task DrawField(string fieldID)
    {
        await IJSRuntime.InvokeVoidAsync("drawField", fieldID);
    }

    private async Task DeleteTemplate()
    {
        var res = await AlertService.DisplayConfirmDialog($"{Localizer["ConfirmationDialogDeleteTemplateFirstPart"]} '{template.Name}' {Localizer["ConfirmationDialogDeleteTemplateSecondPart"]}?");
        if (res && template != null)
        {
            foreach (var field in fields)
            {
                res = await DataAccess.DeleteItem(field.ID, ObjectStores.Fields.ToString());
                if (!res)
                {
                    throw new Exception($"Error occured during field deletion. Field ID: {field.ID}.");
                }
            }
            res = await DataAccess.DeleteItem(template.ID, ObjectStores.Templates.ToString());
            if (res)
            {
                NavigationManager.NavigateTo("/formcapture/templates");
            }
        }
    }

    private async Task TestIdFieldRecognition()
    {
        SetFieldToIdentifying(fields.Single(i => i.ID.Equals(identifyingFieldId)));
        if (identifyingField != null && !string.IsNullOrEmpty(expectedValue))
        {
            isTestButtonDisabled = true;
            var fieldProperties = await IJSRuntime.InvokeAsync<string>("getFieldProperties", identifyingField.ID);
            var fieldPropertiesSplit = fieldProperties.Split(",");
            identifyingField.Width = Convert.ToInt32(fieldPropertiesSplit[0]);
            identifyingField.Height = Convert.ToInt32(fieldPropertiesSplit[1]);
            identifyingField.Xposition = Convert.ToInt32(fieldPropertiesSplit[2]);
            identifyingField.Yposition = Convert.ToInt32(fieldPropertiesSplit[3]);
            var response = await IJSRuntime.InvokeAsync<System.Text.Json.JsonElement>("recogSingleField", identifyingField, Convert.ToBase64String(template.Image), "ces", template.ContentType);
            await IJSRuntime.InvokeVoidAsync("displayTemplateTestResult", response.EnumerateArray().FirstOrDefault().GetString().Split("/")[0], expectedValue);
            isTestButtonDisabled = false;
        }
        else
        {
            await AlertService.DisplayToast("id-error-toast");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            template = await DataAccess.GetItem<Template>(TemplateID, ObjectStores.Templates.ToString());
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo($"/formcapture/templates/{TemplateID}/notfound");
            return;
        }
        if (template != null)
        {
            fields = await DataAccess.GetItemsAsList<Field>(ObjectStores.Fields.ToString());
            if (fields != null)
            {
                fields = fields.Where(i => i.TemplateID.Equals(template.ID)).ToList();
                fileContent = $"data:{template.ContentType};base64,{Convert.ToBase64String(template.Image)}";
                identifyingField = fields.SingleOrDefault(i => i.IsIdentifying);
                identifyingFieldId = identifyingField.ID;
                if (identifyingField != null)
                {
                    expectedValue = identifyingField.ExpectedValue;
                    await IJSRuntime.InvokeVoidAsync("drawFields", fields, "template-canvas");
                }
            }
        }
    }
}