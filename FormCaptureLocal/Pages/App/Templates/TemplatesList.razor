@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject IStringLocalizer<App> Localizer
@page "/formcapture/templates"

<h3><span class="oi oi-image mr-1"></span> @Localizer["TemplatesListPageTitle"]</h3>

<hr />

<div class="d-flex">
    <button type="button" class="btn btn-outline-success" @onclick="@(e => Navigate("/formcapture/templates/add"))" title="@Localizer["TemplatesListPageAddButtonTitle"]">
        <span class="oi oi-plus mr-2"></span> @Localizer["TemplatesListPageAddButtonText"]
    </button>
    <div class="dropdown">
        <button type="button" class="btn btn-outline-primary ml-2 dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="sortButton" title="@Localizer["SortButtonTitle"]">
            <span class="oi oi-sort-ascending mr-1"></span> @Localizer["SortButtonText"]
        </button>
        <div class="dropdown-menu" aria-labelledby="sortButton">
            <a class="dropdown-item" href="/formcapture/templates/#" title="@Localizer["SortButtonSortByNameText"]" @onclick="@(e => SortList("name"))">
                @Localizer["SortButtonSortByNameText"]
            </a>
            <a class="dropdown-item" href="/formcapture/templates/#" title="@Localizer["SortButtonSortByDateText"]" @onclick="@(e => SortList("added"))">
                @Localizer["SortButtonSortByDateText"]
            </a>
            <a class="dropdown-item" href="/formcapture/templates/#" title="@Localizer["SortButtonSortByLastUpdatedText"]" @onclick="@(e => SortList("updated"))">
                @Localizer["SortButtonSortByLastUpdatedText"]
            </a>
        </div>
    </div>
</div>

<div class="table-responsive mt-3">
    <table class="table table-hover">
        <thead>
            <tr>
                <td><b>@Localizer["Name"]</b></td>
                <td><b>@Localizer["Added"]</b></td>
                <td><b>@Localizer["LastUpdated"]</b></td>
                <td><b>@Localizer["Delete"]</b></td>
            </tr>
        </thead>

        <tbody>
            @if (templates != null)
            {
                @foreach (var template in templates)
                {
                    <tr class="pointer">
                        <td @onclick="@(e => Navigate($"/formcapture/templates/{template.ID}"))">@template.Name</td>
                        <td @onclick="@(e => Navigate($"/formcapture/templates/{template.ID}"))">@template.Added</td>
                        <td @onclick="@(e => Navigate($"/formcapture/templates/{template.ID}"))">@template.Updated</td>
                        <td @onclick="@(e => DeleteTemplate(template))"><span class="oi oi-trash"></span></td>
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (templates == null)
    {
        <p class="tableText">@Localizer["Loading"]...</p>
    }
    else
    {
        @if (templates.Count <= 0)
        {
            <p class="tableText">@Localizer["TemplatesListPageNoTemplatesText"]</p>
        }
    }
</div>

<div class="toast-area">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="error-toast" role="alert">
        <strong class="mr-auto">Error</strong>
        <hr />
        <p class="errorMessage">@errorMessage</p>
        <button type="button" class="close" onclick="closeAlert('error-toast');" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    private List<Template> templates;

    private string errorMessage;

    private void Navigate(string page)
    {
        NavigationManager.NavigateTo(page);
    }

    protected override async Task OnInitializedAsync()
    {
        templates = await IJSRuntime.InvokeAsync<List<Template>>("getAllItems", "Templates");
        if (templates != null)
        {
            templates = templates.Where(i => i.UserID.Equals(UserHelper.UserID)).OrderBy(i => i.Added).ToList();
        }
    }

    private async Task SortList(string attribute)
    {
        if (templates != null)
        {
            if (templates.Count > 0)
            {
                if (attribute.Equals("name"))
                {
                    templates = templates.OrderBy(i => i.Name).ToList();
                }
                else if (attribute.Equals("added"))
                {
                    templates = templates.OrderBy(i => i.Added).ToList();
                }
                else if (attribute.Equals("updated"))
                {
                    templates = templates.OrderBy(i => i.Updated).ToList();
                }
            }
            else
            {
                errorMessage = $"{Localizer["TemplatesListPageSortEmptyTemplatesError"]}.";
                await IJSRuntime.InvokeVoidAsync("displayToast", "error-toast");
            }
        }
        else
        {
            errorMessage = $"{Localizer["TemplatesListPageSortNullTemplatesError"]}.";
            await IJSRuntime.InvokeVoidAsync("displayToast", "error-toast");
        }
    }

    private async Task DeleteTemplate(Template template)
    {
        var res = await IJSRuntime.InvokeAsync<bool>("confirmDialog", $"{Localizer["ConfirmationDialogDeleteTemplateFirstPart"]} '{template.Name}' {Localizer["ConfirmationDialogDeleteTemplateSecondPart"]}?");
        if (res && template != null)
        {
            var fields = await IJSRuntime.InvokeAsync<List<Field>>("getAllItems", "Fields");
            foreach (var field in fields.Where(i => i.TemplateID.Equals(template.ID)))
            {
                res = await IJSRuntime.InvokeAsync<bool>("deleteItem", field.ID, "Fields");
                if (!res)
                {
                    throw new Exception($"Error occured during field deletion. Field ID: {field.ID}.");
                }
            }
            res = await IJSRuntime.InvokeAsync<bool>("deleteItem", template.ID, "Templates");
            if (res)
            {
                templates.Remove(template);
            }
        }
    }
}