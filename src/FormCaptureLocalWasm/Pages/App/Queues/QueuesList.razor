@layout AppLayout
@inject NavigationManager NavigationManager
@inject IDataAccess DataAccess
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@page "/formcapture/queues"

<IconHeader Icon="list-rich" Title="@Localizer["Queues"]" />

<Divider />

<IconButton OnClickCallback="@(e => Navigate("/formcapture/queues/start"))" Icon="plus" Text="@Localizer["AddNewTemplateButtonText"]" Type="primary" Class="mb4" />

<div class="table-responsive mt-4">
    @if (Queues != null)
    {
        <table class="custom-table">
            <thead>
                <tr>
                    <td>@Localizer["Name"]</td>
                    <td>Status</td>
                    <td>@Localizer["Added"]</td>
                    <td>@Localizer["Options"]</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var queue in Queues)
                {
                    <tr class="hoverable-row pointer">
                        <td>@queue.Name</td>
                        <td>@queue.QueueStatus</td>
                        <td>@queue.Added</td>
                        <td>
                            <Popconfirm Title="Do you want to delete this template?" OkText="Yes" CancelText="No">
                                <Button Danger>@Localizer["Delete"]</Button>
                            </Popconfirm>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (Queues.Count == 0)
        {
            <Empty class="mt-4" />
        }
    }
    else
    {
        <Spin Size="large" />
    }
</div>

@code
{
    /// <summary>
    /// List of templates that will be displayed on this page.
    /// </summary>
    public List<Queue>? Queues { get; set; }

    /// <summary>
    /// Method for navigating to a specific URL.
    /// </summary>
    /// <param name="url">URL.</param>
    private void Navigate(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    protected override async Task OnInitializedAsync()
    {
        var queues = await DataAccess.GetItemsAsListAsync<Queue>(ObjectStores.Queues.ToString());
        if (queues != null)
        {
            Queues = queues.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
        }
    }
}