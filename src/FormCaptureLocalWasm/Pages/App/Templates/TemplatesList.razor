@layout AppLayout
@inject IStringLocalizer<App> Localizer
@inject IDataAccess DataAccess
@inject NavigationManager NavigationManager
@page "/formcapture/templates"

<AppPageHeader Title="@Localizer["Templates"]" Icon="document" />

<IconButton OnClick="@(e => Navigate("/formcapture/templates/add"))" Icon="plus" Class="mb4" Text="@Localizer["AddNewTemplateButtonText"]" />

<div class="mt-4">
    @if (Templates != null)
    {
        <div class="table-responsive">
            <table class="custom-table">
                <thead>
                    <tr>
                        <td>@Localizer["Name"]</td>
                        <td>@Localizer["Added"]</td>
                        <td>@Localizer["Updated"]</td>
                        <td>@Localizer["Options"]</td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var template in Templates)
                    {
                        <tr class="hoverable-row pointer">
                            <td @onclick="@(e => Navigate($"/formcapture/templates/edit/{template.ID}"))">@template.Name</td>
                            <td @onclick="@(e => Navigate($"/formcapture/templates/edit/{template.ID}"))">@template.Added</td>
                            <td @onclick="@(e => Navigate($"/formcapture/templates/edit/{template.ID}"))">@template.Updated</td>
                            <td>
                                <IconButton Text="@Localizer["Delete"]" Icon="trash" Type="red-button" OnClick="@(e => DeleteTemplate(template))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (Templates.Count == 0)
        {
            <h2>
                @Localizer["Empty"]
            </h2>
        }
    }
    else
    {
        <Loading />
    }
</div>

@code
{
    /// <summary>
    /// List of templates that will be displayed on this page.
    /// </summary>
    public List<Template>? Templates { get; set; }

    /// <summary>
    /// Method for navigating to a specific URL.
    /// </summary>
    /// <param name="url">URL.</param>
    private void Navigate(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    /// <summary>
    /// Method for deleting a specific template.
    /// </summary>
    /// <param name="template">Template that will be deleted.</param>
    private async Task DeleteTemplate(Template template)
    {
        var deleteTemplateResult = await DataAccess.DeleteItemAsync(template.ID, ObjectStores.Templates.ToString());
        var fields =  await DataAccess.GetItemsAsListAsync<Field>(ObjectStores.Fields.ToString());
        fields = fields.Where(i => i.TemplateID.Equals(template.ID)).ToList();
        bool deleteFieldsResult = false;
        foreach (var field in fields)
        {
            deleteFieldsResult = await DataAccess.DeleteItemAsync(field.ID, ObjectStores.Fields.ToString());
        }
        if (deleteTemplateResult && deleteFieldsResult)
        {
            Templates?.Remove(template);
        }
        else
        {
            //await MessageService.Error("Error occured during template deletion.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var templates = await DataAccess.GetItemsAsListAsync<Template>(ObjectStores.Templates.ToString());
        if (templates != null)
        {
            Templates = templates.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
        }
    }
}