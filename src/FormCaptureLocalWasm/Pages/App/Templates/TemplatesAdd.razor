@layout AppLayout
@inject IStringLocalizer<App> Localizer
@inject IDataAccess DataAccess
@inject IJSRuntime JSRuntime
@page "/formcapture/templates/add"

<h1>
    <span class="oi oi-document mt-1 me-2" aria-hidden="true"></span> Add a template
</h1>

<Divider />

<div class="mb-3">
    <label for="template-name"><b>Template name</b>:</label>
    <div class="mt-2">
        <Input Placeholder="Enter template name..." name="template-name" id="template-name" class="" @bind-Value="template.Name"  />
    </div>

    <Divider />

    <Row Gutter="(32,16)">
        <!--Image upload column-->
        <Col Xs="24" Sm="24" Lg="24" Xl="12">
            <h2><span class="oi oi-image me-2"></span>Image</h2>
            <div>
                @if (!string.IsNullOrEmpty(fileContent))
                {
                    <div id="template-canvas">
                        <img id="template-preview-image" draggable="false" src="@fileContent" alt="Template" />
                    </div>
                }
                else
                {
                    <Empty />
                }
            </div>
            <Divider class="mb-0"><span class="oi oi-data-transfer-upload me-2"></span> File upload</Divider>
            <InputFile OnChange="@FileSelected" class="mt-3 pointer" />
        </Col>

        <!--Fields column-->
        <Col Xs="24" Sm="24" Lg="24" Xl="12">
            <div>
                <Card Title="Fields">
                    <Body>
                        @if (fields.Count == 0)
                        {
                            <Empty />
                        }
                        else
                        {
                            <AntList Bordered DataSource="@fields">
                                <ChildContent Context="field">
                                    <ListItem>
                                        <Input Placeholder="Enter field name..." @bind-Value="@field.Name" />
                                        <Button @onclick="@(e => DrawField(field.ID))">
                                            <span class="oi oi-pencil me-2"></span> <span class="field-list-button-text">Draw</span>
                                        </Button>
                                        <Button @onclick="@(e => RemoveField(field))">
                                            <span class="oi oi-trash me-2"></span> <span>Delete</span>
                                        </Button>
                                        <Button @onclick="@(e => SetFieldToIdentifying(field))">
                                            <span class="oi oi-star"></span>
                                        </Button>
                                    </ListItem>
                                </ChildContent>
                            </AntList>
                        }
                    </Body>
                    <ActionTemplate>
                        <CardAction>
                            <div @onclick="AddNewField">
                                <span class="oi oi-plus me-2"></span>Add a new field
                            </div>
                        </CardAction>
                    </ActionTemplate>
                </Card>

                <Card title="Identifying field" class="mt-3">
                    <Body>
                        @if (identifyingField == null)
                        {
                            <Empty />
                        }
                        else
                        {
                            <p class="mb-0">@identifyingField.Name</p>
                        }
                    </Body>
                    <ActionTemplate>
                        @if (!isTestButtonVisible)
                        {
                            <CardAction>
                                <div @onclick="AddNewField">
                                    <span class="oi oi-beaker me-2"></span>Test identification
                                </div>
                            </CardAction>
                        }
                    </ActionTemplate>
                </Card>
            </div>
        </Col>
    </Row>

    <Button Type="@ButtonType.Primary" Block class="mt-3">
        <span class="oi oi-check me-2"></span>Save template
    </Button>
</div>

@code
{
    /// <summary>
    /// Private field with a <see cref="Models.DbModels.Template"/> class instance.
    /// </summary>
    private FormCaptureLocalWasm.Models.DbModels.Template template = new FormCaptureLocalWasm.Models.DbModels.Template() { ID = Guid.NewGuid().ToString() };

    /// <summary>
    /// Private field with content (encoded as base64) of the template image.
    /// </summary>
    private string? fileContent;

    /// <summary>
    /// Private field with a list of fields connected to the template.
    /// </summary>
    private List<Field> fields = new List<Field>();

    private Field? identifyingField;

    /// <summary>
    /// Private field wtih value representing if test button is visible or not.
    /// </summary>
    private bool isTestButtonVisible = false;

    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 1)
        {
            return;
        }
        fileContent = $"data:{e.File.ContentType};base64,";
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);
        template.Image = buffer;
        template.ContentType = e.File.ContentType;
        fileContent += Convert.ToBase64String(buffer);
    }

    /// <summary>
    /// Method for starting the process of drawing a field on the image.
    /// </summary>
    /// <param name="fieldID">ID of a specific field.</param>
    private async Task DrawField(string? fieldID)
    {
        if (!string.IsNullOrEmpty(fieldID))
        {
            await JSRuntime.InvokeVoidAsync("drawField", fieldID);
        }
    }

    /// <summary>
    /// Method for adding a new item to fields list.
    /// </summary>
    private void AddNewField()
    {
        fields.Add(new Field()
        {
            ID = Guid.NewGuid().ToString(),
            Name = "New field",
            Added = DateTime.Now,
            Updated = DateTime.Now,
            IsIdentifying = false,
            TemplateID = template.ID
        });
    }

    /// <summary>
    /// Method for removing a specific field from fields list and from local db.
    /// </summary>
    /// <param name="field">Instance of a <see cref="Field"/> class.</param>
    private async Task RemoveField(Field field)
    {
        await JSRuntime.InvokeVoidAsync("removeField", field.ID);
        fields.Remove(field);
    }

    /// <summary>
    /// Method for setting a new identifying field or toggling an existing one.
    /// </summary>
    /// <param name="field">Instance of a <see cref="Field"/> class.</param>
    private void SetFieldToIdentifying(Field field)
    {
        if (identifyingField != null)
        {
            identifyingField.IsIdentifying = false;
        }
        else
        {
            field.IsIdentifying = true;
        }
        identifyingField = field;
    }
}