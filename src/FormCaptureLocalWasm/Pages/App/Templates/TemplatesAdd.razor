@layout AppLayout
@inject IStringLocalizer<App> Localizer
@inject IDataAccess DataAccess
@inject IJSRuntime JSRuntime
@inject IRecognitionService Recognition
@inject NavigationManager NavigationManager
@page "/formcapture/templates/add"

<AppPageHeader Title="@Localizer["AddTemplatePageTitle"]" Icon="document" />

<div class="mb-3">
    <label for="template-name"><b>@Localizer["TemplateNameInputLabel"]</b>:</label>
    <div class="mt-2">
        <input Placeholder="@Localizer["TemplateNameInputPlaceholder"]" type="text" name="template-name" id="template-name" />
    </div>

    <Divider />

    <IconSubheader Icon="image" Title="@Localizer["Image"]" />
    @if (!string.IsNullOrEmpty(fileContent))
    {
        <div id="template-canvas">
            <img id="template-preview-image" draggable="false" src="@fileContent" alt="Template" />
        </div>
    }
    else
    {
        <p>Nahrajte obr√°zek.</p>
    }
    <InputFile OnChange="@FileSelected" class="mt-3 pointer" title="@Localizer["FileUpload"]" />

    <Divider />
    <p>@Localizer["Fields"]</p>
    @if (fields.Count == 0)
    {
        <p>@Localizer["NoFieldsAddedMessage"]</p>
    }
    else
    {
        <FieldsList Fields="@fields" OnSetFieldToIdentifyingClick="@OnSetIdentifyingField" />
    }

    <IconButton IsLoading="isSubmitButtonLoading" Text="@Localizer["AddNewFieldButtonText"]" Icon="plus" />

    <Divider />

    <IconButton OnClick="Submit" IsLoading="isSubmitButtonLoading" Text="@Localizer["SaveTemplateButtonText"]" Icon="check" />
</div>

@code
{
    /// <summary>
    /// Private field with a <see cref="Template"/> class instance.
    /// </summary>
    private Template template = new Template();

    /// <summary>
    /// Private field with content (encoded as base64) of the template image.
    /// </summary>
    private string? fileContent;

    /// <summary>
    /// Private field wtih value representing if modal for testing identification is visible or not.
    /// </summary>
    private bool isTestModalVisible = false;

    /// <summary>
    /// Private field with a list of fields connected to the template.
    /// </summary>
    private List<Field> fields = new List<Field>();

    /// <summary>
    /// Private field with instance of <see cref="Field"/> class.
    /// </summary>
    private Field? identifyingField;

    /// <summary>
    /// Private field with value representing if test button is loading or not.
    /// </summary>
    private bool isTestButtonLoading = false;

    /// <summary>
    /// Private field with value representing if submit button is loading or not.
    /// </summary>
    private bool isSubmitButtonLoading = false;

    /// <summary>
    /// Private field that is bound to expected value input.
    /// </summary>
    private string? expectedValue;

    /// <summary>
    /// Private field that contains recognized value of identification field.
    /// </summary>
    private string? recognizedValue;

    /// <summary>
    /// Event handler for file upload.
    /// </summary>
    /// <param name="e">File upload event arguments.</param>
    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 1)
        {
            return;
        }
        fileContent = $"data:{e.File.ContentType};base64,";
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);
        template.Image = buffer;
        template.ContentType = e.File.ContentType;
        fileContent += Convert.ToBase64String(buffer);
    }

    /// <summary>
    /// Event handler for handling id field set.
    /// </summary>
    /// <param name="field">New id field.</param>
    private void OnSetIdentifyingField(Field field)
    {
        if (identifyingField != null)
        {
            fields.Single(i => i.IsIdentifying).IsIdentifying = false;
        }
        field.IsIdentifying = true;
        identifyingField = field;
    }

    /// <summary>
    /// Method for adding a new item to fields list.
    /// </summary>
    private void AddNewField()
    {
        fields.Add(new Field()
        {
            Name = "New field",
            IsIdentifying = false,
            UserID = UserHelper.UserID,
            Added = DateTime.Now
        });
    }

    /// <summary>
    /// Method for launching a test if document will be recognized.
    /// </summary>
    private async Task TestIdFieldRecognition()
    {
        //SetFieldToIdentifying(fields.Single(i => i.ID.Equals(identifyingFieldId)));
        if (identifyingField != null && !string.IsNullOrEmpty(expectedValue) && template.Image != null && !string.IsNullOrEmpty(template.ContentType))
        {
            ToggleButtons();
            var fieldProperties = await JSRuntime.InvokeAsync<string>("getFieldProperties", identifyingField.Added);
            if (!string.IsNullOrEmpty(fieldProperties))
            {
                var fieldPropertiesSplit = fieldProperties.Split(",");
                identifyingField.SetDimensions(Convert.ToInt32(fieldPropertiesSplit[0]), Convert.ToInt32(fieldPropertiesSplit[1]));
                identifyingField.SetPosition(Convert.ToInt32(fieldPropertiesSplit[2]), Convert.ToInt32(fieldPropertiesSplit[3]));
                recognizedValue = await Recognition.SinglefieldRecognition(identifyingField, template.Image, template.ContentType, "ces");
                isTestModalVisible = true;
            }
            ToggleButtons();
        }
    }

    /// <summary>
    /// Method for toggling all important buttons on the page.
    /// </summary>
    private void ToggleButtons()
    {
        isTestButtonLoading = !isSubmitButtonLoading;
        isSubmitButtonLoading = !isSubmitButtonLoading;
    }

    /// <summary>
    /// Click event handler for submit button on this page.
    /// </summary>
    private async Task Submit()
    {
        template.UserID = UserHelper.UserID;
        if (identifyingField != null && !string.IsNullOrEmpty(expectedValue) && template.Image != null && !string.IsNullOrEmpty(template.Name) && fields.Count > 0)
        {
            ToggleButtons();
            template.SetDateAdded();
            fields.Single(i => i.IsIdentifying).ExpectedValue = expectedValue;
            // Get and set dimensions of the template, then save template to DB.
            var imageDimensions = await JSRuntime.InvokeAsync<string>("getImageProperties", "template-preview-image");
            var imageDimensionsSplit = imageDimensions.Split("|");
            template.SetDimensions(Convert.ToInt32(imageDimensionsSplit[0]), Convert.ToInt32(imageDimensionsSplit[1]));
            string fieldProperties;
            string[] fieldPropertiesSplit;
            _ = await DataAccess.AddItemAsync(template, ObjectStores.Templates.ToString());
            // Get last template for field TemplateIDs.
            var lastTemplate = (
                await DataAccess.GetItemsAsListAsync<FormCaptureLocalWasm.Models.DbModels.Template>(ObjectStores.Templates.ToString())
            ).LastOrDefault();
            // Set properties of every field, and then save them to DB.
            foreach (var field in fields)
            {
                if (string.IsNullOrEmpty(field.Name))
                {
                    return;
                }
                // Get properties.
                fieldProperties = await JSRuntime.InvokeAsync<string>("getFieldProperties", field.Added);
                if (!string.IsNullOrEmpty(fieldProperties))
                {
                    fieldPropertiesSplit = fieldProperties.Split(",");
                    field.SetDimensions(Convert.ToInt32(fieldPropertiesSplit[0]), Convert.ToInt32(fieldPropertiesSplit[1]));
                    field.SetPosition(Convert.ToInt32(fieldPropertiesSplit[2]), Convert.ToInt32(fieldPropertiesSplit[3]));
                    if (lastTemplate != null)
                    {
                        field.TemplateID = lastTemplate.ID;
                    }
                }
                field.SetDateAdded();
                _ = await DataAccess.AddItemAsync(field, ObjectStores.Fields.ToString());
            }
            NavigationManager.NavigateTo("/formcapture/templates");
        }
    }
}