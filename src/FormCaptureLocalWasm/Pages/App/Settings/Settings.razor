@layout AppLayout
@inject ILocalStorageService localStorage
@inject IStringLocalizer<App> Localizer
@inject MessageService MessageService
@page "/formcapture/settings"

<IconHeader Icon="cog" Title="@Localizer["Settings"]" />

<Divider />

<div class="mb-3">
    <div class="card px-3 py-3">
        <IconSubheader Icon="globe" Title="@Localizer["LocaleSettingTitle"]" />
        <p>@Localizer["LocaleSettingDescription"]</p>
        <select @bind="defaultLocale" title="Select default locale">
            <option value="eng" class="pointer">en-US</option>
            <option value="ces">cz-CS</option>
        </select>
        <IconButton Type="primary" class="mt-3" OnClickCallback="@SaveLocale" Icon="check" Text="@Localizer["SaveSettingButtonText"]" IsLoading="@isSaveLocaleButtonLoading" />
    </div>

    <div class="card px-3 py-3 mt-4">
        <IconSubheader Icon="contrast" Title="@Localizer["ApplicationTheme"]" />
        <p>@Localizer["AppThemeSettingDescription"].</p>
        <div>
            <RadioGroup @bind-Value="@appTheme" class="w-100">
                <Radio Value="@("Default")" class="disable-select radio">@Localizer["DefaultThemeRadioButtonText"]</Radio>
                <Radio Value="@("HighContrastLight")" class="disable-select radio">@Localizer["HighContrastLightThemeRadioButtonText"]</Radio>
                <Radio Value="@("HighContrastDark")" class="disable-select radio">@Localizer["HighContrastDarkThemeRadioButtonText"]</Radio>
            </RadioGroup>
        </div>
        <IconButton Type="primary" class="mt-3" Icon="check" Text="@Localizer["SaveSettingButtonText"]" IsLoading="@isSaveThemeButtonLoading" OnClickCallback="@SaveTheme" />
    </div>
</div>

@code
{
    /// <summary>
    /// Default locale used throughout the app for recognition.
    /// Supported languages for tesseract.js: https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016.
    /// </summary>
    private string? defaultLocale;

    /// <summary>
    /// App's theme.
    /// </summary>
    private string? appTheme;

    /// <summary>
    /// Private field with value representing if button for saving loacle setting is loading or not.
    /// </summary>
    private bool isSaveLocaleButtonLoading = false;

    /// <summary>
    /// Private field with value representing if button for saving app theme setting is loading or not.
    /// </summary>
    private bool isSaveThemeButtonLoading = false;

    /// <summary>
    /// Method for saving locale setting.
    /// </summary>
    private async Task SaveLocale()
    {
        try
        {
            isSaveLocaleButtonLoading = true;
            await localStorage.SetItemAsync(FormCaptureLocalWasm.Models.Enums.Settings.DefaultLocale.ToString(), defaultLocale);
            isSaveLocaleButtonLoading = false;
            await MessageService.Success("Locale has been successfuly saved");
        }
        catch (System.Exception)
        {
            await MessageService.Success("During saving an error occurred");
        }
    }

    /// <summary>
    /// Method for saving app theme setting.
    /// </summary>
    private async Task SaveTheme()
    {
        try
        {
            isSaveThemeButtonLoading = true;
            await localStorage.SetItemAsync(FormCaptureLocalWasm.Models.Enums.Settings.ApplicationTheme.ToString(), appTheme);
            isSaveThemeButtonLoading = false;
            await MessageService.Success("Locale has been successfuly saved");
        }
        catch (System.Exception)
        {
            await MessageService.Success("During saving an error occurred");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        defaultLocale = await localStorage.GetItemAsStringAsync(FormCaptureLocalWasm.Models.Enums.Settings.DefaultLocale.ToString());
        defaultLocale = defaultLocale.Replace("\"", "");
        appTheme = await localStorage.GetItemAsStringAsync(FormCaptureLocalWasm.Models.Enums.Settings.ApplicationTheme.ToString());
        appTheme = appTheme.Replace("\"", "");
    }
}