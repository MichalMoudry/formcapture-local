@layout IndexLayout
@inject IStringLocalizer<App> Localizer
@inject IDataAccess DataAccess
@inject IJSRuntime JSRuntime
@page "/register"

<PageTitle>@Localizer["RegisterPageTitle"]</PageTitle>

<div class="card px-4 form-card py-4">
    <h1 class="mt-0 mb-0">
        <span class="oi oi-person me-1"></span> @Localizer["RegisterPageTitle"]
    </h1>

    <form class="mb-0 py-4">
        <label for="email">Email:</label>
        <input type="email" id="email" placeholder="@Localizer["EmailInputPlaceholder"]" @bind="@user.Email" />

        <label for="password" class="mt-4">@Localizer["Password"]:</label>
        <input type="password" id="password" placeholder="@Localizer["PasswordInputPlaceholder"]" @bind="user.Password" />
    </form>

    <IconButton Icon="check" Text="@Localizer["Submit"]" OnClick="Submit" />

    <div class="success-alert mt-3 @SuccessAlertDisplayCssClass">
        <p>
            @Localizer["RegistrationSuccessTextPart1"]: <a href="/login" title="Login page">@Localizer["LoginPageTitle"]</a>.
        </p>
    </div>
    <div class="error-alert mt-3 @ErrorAlertDisplayCssClass">
        <p>@Localizer["RegistrationErrorText"]</p>
    </div>
</div>

@code
{
    /// <summary>
    /// Private field with refrence to User model.
    /// </summary>
    private User user = new User() { PasswordSalt = Guid.NewGuid().ToString() };

    /// <summary>
    /// Private field with a value indicating if success alert is displayed.
    /// </summary>
    private bool isSuccessAlertDisplayed = false;

    /// <summary>
    /// Private field with a CSS class for displaying success alert.
    /// </summary>
    private string SuccessAlertDisplayCssClass => isSuccessAlertDisplayed ? "" : "display-none";

    /// <summary>
    /// Private field with a value indicating if error alert is displayed.
    /// </summary>
    private bool isErrorAlertDisplayed = false;

    /// <summary>
    /// Private field with a CSS class for displaying error alert.
    /// </summary>
    private string ErrorAlertDisplayCssClass => isErrorAlertDisplayed ? "" : "display-none";

    /// <summary>
    /// Method for displaying an error alert.
    /// </summary>
    private void DisplayErrorAlert()
    {
        isErrorAlertDisplayed = true;
        if (isSuccessAlertDisplayed)
        {
            isSuccessAlertDisplayed = false;
        }
    }

    /// <summary>
    /// Event handler for submitting complete registration form.
    /// </summary>
    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(user.Email) && !string.IsNullOrEmpty(user.Password))
        {
            user.PasswordHash = await JSRuntime.InvokeAsync<string>("hashString", user.Password, user.PasswordSalt);
            user.Password = null;
            var registrationResult = await DataAccess.AddItemAsync(user, ObjectStores.Users.ToString());
            if (registrationResult)
            {
                isSuccessAlertDisplayed = true;
                isErrorAlertDisplayed = false;
            }
            else
            {
                DisplayErrorAlert();
            }
        }
        else
        {
            DisplayErrorAlert();
        }
    }
}