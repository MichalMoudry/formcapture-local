@layout IndexLayout
@inject IStringLocalizer<App> Localizer
@inject IDataAccess DataAccess
@inject IJSRuntime JSRuntime
@page "/register"

<PageTitle>@Localizer["RegisterPageTitle"]</PageTitle>

<div class="card px-4 form-card">
    <h3 class="mt-4"><span class="oi oi-person me-1"></span> @Localizer["RegisterPageTitle"]</h3>
    <Form Model="@user" Layout="@FormLayout.Vertical" OnFinish="@Submit" @ref="form">
        <FormItem Label="Email">
            <Input @bind-Value="@user.Email" />
        </FormItem>

        <FormItem Label="@Localizer["Password"]">
            <InputPassword @bind-Value="@user.Password" />
        </FormItem>

        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                <span class="oi oi-check me-2"></span>@Localizer["Submit"]
            </Button>
        </FormItem>
    </Form>
    <div class="mb-4 @SuccessAlertDisplayCssClass">
        <Alert Type="@AlertType.Success" Message="@Localizer["Success"]" Closable>
            Úspìšnì jste se registrovaly. Pro pøihlášení pøejdìte na tuto stránku: <a href="/login" title="Login page">stránka pro pøihlášení</a>.
        </Alert>
    </div>
    <div class="mb-4 @ErrorAlertDisplayCssClass">
        <Alert Type="@AlertType.Error" Message="@Localizer["Error"]" Closable>
            Bìhem vytváøení emailu došlo k chybì.
        </Alert>
    </div>
</div>

@code
{
    /// <summary>
    /// Private field with refrence to User model.
    /// </summary>
    private User user = new User();

    /// <summary>
    /// Refrence to registration form.
    /// </summary>
    private Form<User>? form;

    private bool isSuccessAlertDisplayed = false;

    private string SuccessAlertDisplayCssClass => isSuccessAlertDisplayed ? "" : "display-none";

    private bool isErrorAlertDisplayed = false;

    private string ErrorAlertDisplayCssClass => isErrorAlertDisplayed ? "" : "display-none";

    /// <summary>
    /// Event handler for submitting complete registration form.
    /// </summary>
    private async Task Submit()
    {
        user.PasswordSalt = Guid.NewGuid().ToString();
        user.PasswordHash = await JSRuntime.InvokeAsync<string>("hashString", user.Password, user.PasswordSalt);
        user.Password = null;
        var registrationResult = await DataAccess.AddItemAsync(user, ObjectStores.Users.ToString());
        if (registrationResult)
        {
            isSuccessAlertDisplayed = true;
        }
        else
        {
            isErrorAlertDisplayed = true;
        }
        if (form != null)
        {
            form.Reset();
        }
    }
}