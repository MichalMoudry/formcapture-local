@layout IndexLayout
@inject IStringLocalizer<App> Localizer
@inject IDataAccess DataAccess
@inject IJSRuntime JSRuntime
@page "/register"

<PageTitle>@Localizer["RegisterPageTitle"]</PageTitle>

<!--
    <h3><span class="oi oi-person"></span> @Localizer["RegisterPageTitle"]</h3>

<div class="mt-2">
    <div class="mb-3">
        <label for="email">Email:</label>
        <input type="email" @bind-value="_email" placeholder="@Localizer["EmailInputPlaceholder"]" id="email" name="email" />
    </div>

    <div class="mb-3">
        <label for="password">@Localizer["Password"]:</label>
        <input type="password" @bind-value="_password" placeholder="@Localizer["PasswordInputPlaceholder"]" id="password" name="password" />
    </div>

    <div class="mb-3">
        <label for="confirm-password">@Localizer["ConfirmPasswordLabel"]:</label>
        <input type="password" @bind-value="_confirmationPassword" placeholder="@Localizer["ConfirmPasswordLabel"]..." id="confirm-password" name="confirm-password" />
    </div>

    <button id="submitButton" title="@Localizer["RegisterFormSubmitButtonTitle"]" @onclick="Submit">
        <span class="oi oi-check me-2"></span> @Localizer["Submit"]
    </button>
</div>
-->

<div class="card px-4 form-card">
    <h3 class="mt-4"><span class="oi oi-person me-1"></span> @Localizer["RegisterPageTitle"]</h3>
    <Form Model="@_user" Layout="@FormLayout.Vertical" OnFinish="@Submit">
        <FormItem Label="Email">
            <Input @bind-Value="@_user.Email" />
        </FormItem>

        <FormItem Label="@Localizer["Password"]">
            <InputPassword @bind-Value="@_password" />
        </FormItem>

        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                <span class="oi oi-check me-2"></span>@Localizer["Submit"]
            </Button>
        </FormItem>
    </Form>
</div>

@code
{
    private User _user = new User();

    [Required]
    private string? _password;

    private async Task Submit()
    {
        _user.PasswordSalt = Guid.NewGuid().ToString();
        _user.PasswordHash = await JSRuntime.InvokeAsync<string>("hashString", _password, _user.PasswordSalt);
        Console.WriteLine($"Password before hash: {_password}");
        Console.WriteLine($"Email: {_user.Email}, Password hash: {_user.PasswordHash}");
    }
}