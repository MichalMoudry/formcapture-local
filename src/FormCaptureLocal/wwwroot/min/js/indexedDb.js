let db, transaction, objStore, request, res; function addItem(e, t) { return new Promise(function (r) { transaction = db.transaction(t, "readwrite"), objStore = transaction.objectStore(t), (request = objStore.add(e)).onsuccess = function () { return r(!0) }, request.onerror = function () { return r(!1) } }) } function getItem(e, t) { return new Promise(function (r) { transaction = db.transaction(t, "readonly"), objStore = transaction.objectStore(t), (request = objStore.get(e)).onsuccess = function (e) { return void 0 === e.target.result ? r(null) : r(e.target.result) }, request.onerror = function () { return r(null) } }) } function getAllItems(e) { return new Promise(function (t) { transaction = db.transaction(e, "readonly"), objStore = transaction.objectStore(e), (request = objStore.getAll()).onsuccess = function (e) { return void 0 === e.target.result ? t(null) : t(e.target.result) }, request.onerror = function () { return t(null) } }) } function putItem(e, t) { return new Promise(function (r) { transaction = db.transaction(t, "readwrite"), objStore = transaction.objectStore(t), (request = objStore.put(e)).onsuccess = function () { return r(!0) }, request.onerror = function () { return r(!1) } }) } function deleteItem(e, t) { return new Promise(function (r) { transaction = db.transaction(t, "readwrite"), objStore = transaction.objectStore(t), (request = objStore.delete(e)).onsuccess = function () { return r(!0) }, request.onerror = function () { return r(!1) } }) } $(document).ready(function () { if (!window.indexedDB) return void console.error("Indexed DB is no supported."); let e = indexedDB.open("FormCaptureDB", 1); e.onupgradeneeded = function () { (db = e.result).objectStoreNames.contains("Queues") || db.createObjectStore("Queues", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("Templates") || db.createObjectStore("Templates", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("Fields") || db.createObjectStore("Fields", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("FieldValues") || db.createObjectStore("FieldValues", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("ProcessedFiles") || db.createObjectStore("ProcessedFiles", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("Workflows") || db.createObjectStore("Workflows", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("WorkflowTasks") || db.createObjectStore("WorkflowTasks", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("WorkflowTaskGroupings") || db.createObjectStore("WorkflowTaskGroupings", { keyPath: "id", autoIncrement: !1 }), db.objectStoreNames.contains("Users") || db.createObjectStore("Users", { keyPath: "email", autoIncrement: !1 }) }, e.onsuccess = function () { null == db && (db = e.result) } });