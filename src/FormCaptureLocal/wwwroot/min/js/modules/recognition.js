const { createWorker: createWorker } = Tesseract; async function recogSingleField(t, a, e, i) { const n = createWorker(); await n.load(), await n.loadLanguage(e), await n.initialize(e); var o = []; const { data: { text: r } } = await n.recognize("data:" + i + ";base64," + a, { rectangle: { top: t.xposition, left: t.yposition, width: t.width, height: t.height } }); return o.push(r.replace(/\s/g, "") + "/" + t.id), await n.terminate(), o } async function recog(t, a, e, i) { const n = createWorker(); await n.load(), await n.loadLanguage(e), await n.initialize(e); for (var o = [], r = 0; r < a.length; r++)for (var c = 0; c < t.length; c++) { const { data: { text: e } } = await n.recognize("data:" + i[r] + ";base64," + a[r], { rectangle: { top: t[c].xposition, left: t[c].yposition, width: t[c].width, height: t[c].height } }); o.push(e.replace(/\s/g, "") + "/" + t[c].id + "/" + r) } return await n.terminate(), o } async function singleFileMultipleFieldsRecog(t, a, e, i) { const n = createWorker(); await n.load(), await n.loadLanguage(e), await n.initialize(e); for (var o = [], r = 0; r < t.length; r++) { const { data: { text: e } } = await n.recognize("data:" + i + ";base64," + a, { rectangle: { top: t[r].xposition, left: t[r].yposition, width: t[r].width, height: t[r].height } }); o.push(e.replace(/\s/g, "") + "/" + t[r].id) } return await n.terminate(), o }