@layout AppLayout
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject DataAccess DataAccess
@inject AlertService AlertService
@inject IJSRuntime IJSRuntime
@inject TesseractService TesseractService
@page "/formcapture/templates/add"

<h3><span class="fluentUiGlyph tableFluentGlyph h3FluentGlyph mr-2">&#xEA84;</span> @Localizer["TemplatesAddPageTitle"]</h3>

<hr />

<!--Controls for setting template's name-->
<div>
    <label for="template-name">@Localizer["TemplateNameInputLabel"]:</label>
    <input name="template-name" @bind-value="template.Name" placeholder="@Localizer["TemplateNameInputPlaceholder"]..." id="template-name" type="text" class="form-control" />
</div>

<div class="row mt-3">
    <!--Column for file input-->
    <div class="col-md">
        <div class="card">
            <div class="card-header">
                <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph mr-2">&#xEA83;</span> @Localizer["TemplateImageHeader"]</h4>
            </div>

            <div class="card-body">
                <div id="template-canvas">
                    @if (!string.IsNullOrEmpty(fileContent))
                    {
                        <img id="template-preview-image" draggable="false" src="@fileContent" alt="@Localizer["TemplateImageHeader"]" />
                    }
                    else
                    {
                        <p>@Localizer["TemplatesAddPageUploadImageText"]</p>
                    }
                </div>
            </div>

            <div class="card-footer">
                <InputFile OnChange="@FileSelected" title="@Localizer["InputFileSingleFilesTitle"]" />
            </div>
        </div>
    </div>

    <div class="col-md">
        <div>
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <div class="col">
                            <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph mr-2">&#xE914;</span> @Localizer["Fields"]</h4>
                        </div>
                        <div class="pointer hoverElement text-center rounded w-10" @onclick="AddNewField">
                            <span class="oi oi-plus mt-2"></span>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div id="field-list">
                        @if (fields.Count > 0)
                        {
                            @foreach (Field field in fields)
                            {
                                <div class="field-list-item mt-1 pr-3 pl-3 pt-2 pb-2">
                                    <div class="row">
                                        <div class="col">
                                            <input class="field-input" @bind-value="field.Name" placeholder="@Localizer["FieldInputPlaceholder"]..." />
                                        </div>

                                        <div class="pointer hoverElement text-center rounded w-10" @onclick="@(e => DrawField(field.ID))">
                                            <span class="fluentUiGlyph">&#xE9C3;</span>
                                        </div>

                                        <div class="pointer hoverElement text-center rounded w-10" @onclick="@(e => RemoveField(field))">
                                            <span class="fluentUiGlyph">&#xE9ED;</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="card-text">@Localizer["TemplatesAddPageNoFieldsMessage"].</p>
                        }
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph mr-2">&#xEB3B;</span> @Localizer["IdFieldHeader"]</h4>
                </div>

                <div class="card-body">
                    <div class="col">
                        <select class="form-control" @bind="identifyingFieldId" title="@Localizer["SelectIdFieldMessage"]">
                            <option value="none">@Localizer["SelectIdFieldMessage"]</option>
                            @foreach (var field in fields)
                            {
                                <option value="@field.ID">@field.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <div class="col mt-2">
                            <input @bind="expectedValue" name="expected-value" id="expected-value" type="text" placeholder="@Localizer["ExpectedValueInputPlaceholder"]..." class="form-control" />
                        </div>

                        <div class="col mt-2">
                            <button disabled="@isTestButtonDisabled" class="btn btn-warning" @onclick="TestIdFieldRecognition" title="@Localizer["TestIdFieldButtonText"]">
                                <span class="oi oi-beaker"></span> @Localizer["TestIdFieldButtonText"]
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="mt-3 mb-3">
    <button class="btn btn-outline-success" @onclick="Confirm" title="@Localizer["TemplatesAddPageSubmitButtonTitle"]">
        <span class="oi oi-check"></span> @Localizer["Submit"]
    </button>
</div>

<div class="toast-area mt-3">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="template-name-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageTemplateNameErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageTemplateNameErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('template-name-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="fields-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageFieldsErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageFieldsErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('fields-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="image-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageImageErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageImageErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('image-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="id-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageIdFieldErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageIdFieldErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('id-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="val-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["TemplatesAddPageExpectedValueErrorTitle"]</strong>
        <hr />
        <p>@Localizer["TemplatesAddPageExpectedValueErrorText"].</p>
        <button type="button" class="close" onclick="closeAlert('val-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    private Template template = new Template() { ID = Guid.NewGuid().ToString(), UserID = UserHelper.UserID };

    private string expectedValue;

    private List<Field> fields = new List<Field>();

    private Field identifyingField;

    private string identifyingFieldId;

    private bool isTestButtonDisabled = false;

    private string fileContent;

    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 1)
        {
            return;
        }
        fileContent = $"data:{e.File.ContentType};base64,";
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);
        template.Image = buffer;
        template.ContentType = e.File.ContentType;
        fileContent += Convert.ToBase64String(buffer);
    }

    /// <summary>
    /// Event handler for onclick event for submit button on this page.
    /// </summary>
    /// <returns>A <see cref="Task"/> representing any asynchronous operation.</returns>
    private async Task Confirm()
    {
        if (identifyingFieldId != null)
        {
            if (!identifyingFieldId.Equals("none"))
            {
                SetFieldToIdentifying(fields.Single(i => i.ID.Equals(identifyingFieldId)));
            }
            else
            {
                await AlertService.DisplayToast("id-error-toast");
                return;
            }
        }
        if (!string.IsNullOrEmpty(template.Name) && template.Image != null && identifyingField != null && !string.IsNullOrEmpty(expectedValue))
        {
            template.Added = DateTime.Now;
            template.Updated = DateTime.Now;
            fields.Single(i => i.IsIdentifying).ExpectedValue = expectedValue;
            var imageDimensions = await IJSRuntime.InvokeAsync<string>("getImageProperties", "template-preview-image");
            var imageDimensionsSplit = imageDimensions.Split("|");
            template.Xdimension = Convert.ToInt32(imageDimensionsSplit[0]);
            template.Ydimension = Convert.ToInt32(imageDimensionsSplit[1]);
            string fieldProperties;
            string[] fieldPropertiesSplit;
            bool addFieldRes = false;
            foreach (var field in fields)
            {
                if (field.Name.Length <= 0)
                {
                    await IJSRuntime.InvokeVoidAsync("displayToast", "fields-error-toast");
                    return;
                }
                fieldProperties = await IJSRuntime.InvokeAsync<string>("getFieldProperties", field.ID);
                fieldPropertiesSplit = fieldProperties.Split(",");
                field.Width = Convert.ToInt32(fieldPropertiesSplit[0]);
                field.Height = Convert.ToInt32(fieldPropertiesSplit[1]);
                field.Xposition = Convert.ToInt32(fieldPropertiesSplit[2]);
                field.Yposition = Convert.ToInt32(fieldPropertiesSplit[3]);
                addFieldRes = await DataAccess.AddItem(field, ObjectStores.Fields.ToString());
            }
            var res = await DataAccess.AddItem(template, ObjectStores.Templates.ToString());
            if (res && addFieldRes)
            {
                NavigationManager.NavigateTo("/formcapture/templates");
            }
        }
        else if (fields.Count <= 0)
        {
            await AlertService.DisplayToast("fields-error-toast");
        }
        else if (string.IsNullOrEmpty(template.Name))
        {
            await AlertService.DisplayToast("template-name-error-toast");
        }
        else if (template.Image == null)
        {
            await AlertService.DisplayToast("image-error-toast");
        }
        else if (identifyingField == null)
        {
            await AlertService.DisplayToast("id-error-toast");
        }
        else if (string.IsNullOrEmpty(expectedValue))
        {
            await AlertService.DisplayToast("val-error-toast");
        }
    }

    private void AddNewField()
    {
        fields.Add(new Field()
        {
            ID = Guid.NewGuid().ToString(),
            Name = "New field",
            Added = DateTime.Now,
            Updated = DateTime.Now,
            IsIdentifying = false,
            TemplateID = template.ID,
            UserID = UserHelper.UserID
        });
    }

    private void SetFieldToIdentifying(Field field)
    {
        if (identifyingField != null)
        {
            identifyingField.IsIdentifying = false;
        }
        field.IsIdentifying = true;
        identifyingField = field;
    }

    private async Task RemoveField(Field field)
    {
        await IJSRuntime.InvokeVoidAsync("removeField", field.ID);
        fields.Remove(field);
    }

    private async Task DrawField(string fieldID)
    {
        await IJSRuntime.InvokeVoidAsync("drawField", fieldID);
    }

    private async Task TestIdFieldRecognition()
    {
        SetFieldToIdentifying(fields.Single(i => i.ID.Equals(identifyingFieldId)));
        if (identifyingField != null && !string.IsNullOrEmpty(expectedValue))
        {
            isTestButtonDisabled = true;
            var fieldProperties = await IJSRuntime.InvokeAsync<string>("getFieldProperties", identifyingField.ID);
            var fieldPropertiesSplit = fieldProperties.Split(",");
            identifyingField.Width = Convert.ToInt32(fieldPropertiesSplit[0]);
            identifyingField.Height = Convert.ToInt32(fieldPropertiesSplit[1]);
            identifyingField.Xposition = Convert.ToInt32(fieldPropertiesSplit[2]);
            identifyingField.Yposition = Convert.ToInt32(fieldPropertiesSplit[3]);
            var response = await TesseractService.SinglefieldRecognition(identifyingField, template.Image, "ces", template.ContentType);
            await IJSRuntime.InvokeVoidAsync("displayTemplateTestResult", response.EnumerateArray().FirstOrDefault().GetString().Split("/")[0], expectedValue);
            isTestButtonDisabled = false;
        }
        else
        {
            await AlertService.DisplayToast("id-error-toast");
        }
    }
}