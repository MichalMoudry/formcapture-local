@layout AppLayout
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject DataAccess DataAccess
@inject IJSRuntime IJSRuntime
@inject AlertService AlertService
@page "/formcapture/queues/{queueID}/scan"

<div class="jumbotron">
    <h4 class="display-4"><span class="fluentUiGlyph">&#xEA01;</span>  @Localizer["ScanNoun"]</h4>
    <p class="lead">@Localizer["ScanPageLead1Text"]:</p>
    <ul class="list-group">
        <li class="list-group-item list-group-item-primary">1. @Localizer["ScanPageFirstOperationDescription"]</li>
        @if (queue != null)
        {
            @if (customTasks != null && !queue.IsAutomatic)
            {
                @if (customTasks.Count > 0)
                {
                    @foreach (var task in customTasks)
                    {
                        <li class="list-group-item list-group-item-primary">@(customTasks.IndexOf(task) + 2). @task.Name - @task.Description</li>
                    }
                }
            }
        }
    </ul>
    <p class="lead mt-3">@Localizer["ScanPageLead2Text"].</p>
    @if (queue != null)
    {
        @if (!queue.IsAutomatic)
        {
            <hr class="my-4">
            <p><b>@Localizer["ProcessedFiles"]</b>:</p>
            <ul class="list-group">
                @if (processedFiles != null)
                {
                    @foreach (var file in processedFiles)
                    {
                        <li class="list-group-item list-group-item-info">
                            <span>@file.Name</span>
                            <span class="float-right">
                                <button type="button" class="close" aria-label="Remove file" title="@Localizer["RemoveImage"]" @onclick="@(e => RemoveFile(file))">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </span>
                        </li>
                    }
                }
            </ul>
            <hr class="my-4" />
            <button class="btn btn-outline-primary btn-lg btn-block" role="button" title="@Localizer["ScanPageLaunchTaskButtonText"]" @onclick="Submit">
                <span class="oi oi-play-circle mr-2"></span> @Localizer["ScanPageLaunchTaskButtonText"]
            </button>
        }
    }
    else
    {
        <h4>@Localizer["Loading"]...</h4>
    }
</div>

<!--Toast area-->
<div class="toast-area mt-3">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="no-files-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["ScanPageAtLeastOneFileMessageTitle"]</strong>
        <hr />
        <p>@Localizer["ScanPageAtLeastOneFileMessage"].</p>
        <button type="button" class="close" onclick="closeAlert('no-files-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

<!--Full page loading screen-->
<div id="fullPageLoadingScreen" class="@FullPageLoadingScreenCssClass">
    <div class="d-flex justify-content-center main-loading-div">
        @Localizer["Loading"]...
        <div class="spinner-border mt-4" role="status">
            <span class="sr-only">@Localizer["Loading"]...</span>
        </div>
    </div>
</div>

@code
{
    /// <summary>
    /// ID of a queue that is going to be processed.
    /// </summary>
    [Parameter]
    public string QueueID { get; set; }

    /// <summary>
    /// Queue that is being processed.
    /// </summary>
    private Queue queue;

    /// <summary>
    /// List of processed files (see: <see cref="ProcessedFile"/> class).
    /// </summary>
    private List<ProcessedFile> processedFiles;

    /// <summary>
    /// List of workflow tasks made by the user for scan portion of document processing.
    /// </summary>
    private List<WorkflowTask> customTasks = new List<WorkflowTask>();

    /// <summary>
    /// Private field indicating if full page loading screen is displayed.
    /// </summary>
    private bool isFullPageLoadingScreenDisplayed;

    /// <summary>
    /// Private filed for seting and geting value of a CSS class for displaying/hiding fullpage loading screen.
    /// </summary>
    private string FullPageLoadingScreenCssClass => isFullPageLoadingScreenDisplayed ? "d-block" : "d-none";

    /// <summary>
    /// Method for processing files. Currently includes only conversion of content to black and white.
    /// </summary>
    private async Task ProcessFiles()
    {
        string unparsedBlackAndWhiteContent;
        var newProcessedFiles = new List<ProcessedFile>();
        foreach (var file in processedFiles)
        {
            //Console.WriteLine($"data:{file.ContentType};base64,{Convert.ToBase64String(file.Content)}");
            unparsedBlackAndWhiteContent = await IJSRuntime.InvokeAsync<string>("convertImageToGreyScale", $"data:{file.ContentType};base64,{Convert.ToBase64String(file.Content)}");
            file.BlackAndWhiteContent = Convert.FromBase64String(unparsedBlackAndWhiteContent.Split("base64,")[1]);
            newProcessedFiles.Add(file);
        }
        processedFiles = newProcessedFiles;
    }

    /// <summary>
    /// Method for executing custom tasks written in JS.
    /// </summary>
    private async Task ExecuteCustomTasks()
    {
        //If there are custom tasks => execute them
        if (customTasks.Count > 0)
        {
            //Execute each custom task
            foreach (var task in customTasks)
            {
                _ = await IJSRuntime.InvokeAsync<bool>("executeJS", task.Content);
            }
        }
    }

    /// <summary>
    /// Method for updating required entites in a database.
    /// </summary>
    private async Task UpdateEntites()
    {
        foreach (var file in processedFiles)
        {
            _ = await DataAccess.UpdateItem(file, ObjectStores.ProcessedFiles.ToString());
        }
        queue.QueueTask = QueueTask.Scan;
        _ = await DataAccess.UpdateItem(queue, ObjectStores.Queues.ToString());
    }

    /// <summary>
    /// Method for removing file from queue of processed files.
    /// </summary>
    /// <param name="file">File to remove.</param>
    private async Task RemoveFile(ProcessedFile file)
    {
        if (processedFiles.Count > 1)
        {
            processedFiles.Remove(file);
            _ = await DataAccess.DeleteItem(file.ID, ObjectStores.ProcessedFiles.ToString());
        }
        else
        {
            await AlertService.DisplayToast("no-files-error-toast");
        }
    }

    /// <summary>
    /// Event handler for submit button on this page.
    /// </summary>
    private async Task Submit()
    {
        isFullPageLoadingScreenDisplayed = true;
        //Process files
        await ProcessFiles();
        //Execute tasks
        await ExecuteCustomTasks();
        //Update files
        await UpdateEntites();
        isFullPageLoadingScreenDisplayed = false;
        NavigationManager.NavigateTo($"/formcapture/queues/{QueueID}/identification");
    }

    protected override async Task OnInitializedAsync()
    {
        isFullPageLoadingScreenDisplayed = true;
        queue = await DataAccess.GetItem<Queue>(QueueID, ObjectStores.Queues.ToString());
        if (queue != null)
        {
            //Get processed files
            processedFiles = await DataAccess.GetItemsAsList<ProcessedFile>(ObjectStores.ProcessedFiles.ToString());
            if (processedFiles != null)
            {
                processedFiles = processedFiles.Where(i => i.QueueID.Equals(QueueID)).ToList();
                //If workflow id is set retrieve groupings and potential tasks
                if (!string.IsNullOrEmpty(queue.WorkflowID))
                {
                    //Get workflow-task groupings
                    var workflowTaskGroupings = await DataAccess.GetItemsAsList<WorkflowTaskGrouping>(ObjectStores.WorkflowTaskGroupings.ToString());
                    //Filter workflow-task groupings that are not part of selected workflow and are not for scan
                    workflowTaskGroupings = workflowTaskGroupings
                        .Where(i => i.WorkflowID.Equals(queue.WorkflowID) && i.TaskGroupName.Equals($"{QueueTask.Scan}"))
                        .OrderBy(i => i.ExecutionOrderNumber)
                        .ToList();
                    //Workflow does not need to have any tasks => check needed
                    if (workflowTaskGroupings.Count > 0)
                    {
                        //Get all tasks
                        var allTasks = await DataAccess.GetItemsAsList<WorkflowTask>(ObjectStores.WorkflowTasks.ToString());
                        foreach (var grouping in workflowTaskGroupings)
                        {
                            //Add task that corresponds with TaskID in the grouping
                            customTasks.Add(allTasks.Single(i => i.ID.Equals(grouping.TaskID)));
                        }
                    }
                }
                if (queue.IsAutomatic)
                {
                    //Process files
                    await ProcessFiles();
                    //Execute tasks
                    await ExecuteCustomTasks();
                    //Update files
                    await UpdateEntites();
                    NavigationManager.NavigateTo($"/formcapture/queues/{QueueID}/identification");
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/NotFound");
        }
        isFullPageLoadingScreenDisplayed = false;
    }
}