@layout AppLayout
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject DataAccess DataAccess
@inject IJSRuntime IJSRuntime
@inject TesseractService TesseractService
@inject AlertService AlertService
@page "/formcapture/queues/{queueID}/verification"

<div class="jumbotron" style="overflow: hidden;">
    <h4 class="display-4"><span class="fluentUiGlyph">&#xE969;</span>  @Localizer["VerificationNoun"]</h4>
    <hr class="my-4" />

    <!--Identification results-->
    <h5 class="mb-3"><span class="fluentUiGlyph mr-1">&#xEA1E;</span>  @Localizer["VerificationPageLead1Text"]:</h5>
    <div id="queueQuickPreview">
        @if (processedFiles != null && templates != null)
        {
            @foreach (var file in processedFiles)
            {
                <div class="quickPreviewItem mr-3">
                    <img src="data:{@file.ContentType};base64,@Convert.ToBase64String(file.Content)" alt="@file.Name" id="@file.ID" class="quickPreviewImage figure-img img-fluid rounded" draggable="false" />
                    @if (file.TemplateID != null)
                    {
                        <span class="verificationIdResult rounded p-2">@templates.Single(i => i.ID.Equals(file.TemplateID)).Name</span>
                    }
                    else
                    {
                        <span class="verificationIdResult rounded p-2 pointer hoverElement" data-toggle="modal" data-target="#manualIdentificationModal" @onclick="@(e => SelectUnidentifiedFile(file))">
                            Unidentified
                        </span>
                    }
                </div>
            }
        }
    </div>
    <hr class="my-4" />

    <!--Recognition results-->
    <h5 class="mb-3"><span class="fluentUiGlyph mr-1">&#xEB4E;</span>  @Localizer["VerificationPageLead2Text"]:</h5>
    <p class="mb-2">@Localizer["VerificationPageRecognitionResultsDescription"]</p>
    @if (fieldValues != null && processedFiles != null && fields != null)
    {
        @foreach (var file in processedFiles)
        {
            <p class="mb-0 mt-3"><span class="fluentUiGlyph buttonFluentGlyph mr-2">&#xEB3A;</span> <strong>@file.Name</strong></p>
            @if (file.TemplateID != null)
            {
                @foreach (var value in fieldValues.Where(i => i.FileID.Equals(file.ID)))
                {
                    <label for="@value.ID" class="mt-2">@fields.Single(i => i.ID.Equals(value.FieldID)).Name</label>
                    <input placeholder="@Localizer["VerificationPageEnterNewValuePlaceholder"]..." @bind-value="value.Value" id="@value.ID" type="text" class="form-control" />
                }
            }
            else
            {
                <p>File not identified.</p>
            }
        }
    }
    <hr class="my-4" />

    <!--Custom tasks display-->
    <p class="lead"><span class="oi oi-code mr-1"></span> @Localizer["VerificationPageLead3Text"]:</p>
    <ul class="list-group">
        <li class="list-group-item list-group-item-primary">1. @Localizer["VerificationPageFirstOperationDescription"]</li>
        @if (queue != null)
        {
            @if (customTasks != null && !queue.IsAutomatic)
            {
                @if (customTasks.Count > 0)
                {
                    @foreach (var task in customTasks)
                    {
                        <li class="list-group-item list-group-item-primary">@(customTasks.IndexOf(task) + 2). @task.Name - @task.Description</li>
                    }
                }
            }
        }
    </ul>

    <!--Submit button section-->
    @if (queue != null)
    {
        @if (!queue.IsAutomatic)
        {
            <hr class="my-4" />
            <p class="lead mt-3">@Localizer["VerificationPageLead4Text"].</p>
            <hr class="my-4" />
            <button class="btn btn-outline-primary btn-lg btn-block" data-toggle="tooltip" role="button" title="@Localizer["VerificationPageLaunchTaskButtonText"]" @onclick="Submit">
                <span class="oi oi-play-circle mr-2"></span> @Localizer["VerificationPageLaunchTaskButtonText"]
            </button>
        }
    }
    else
    {
        <h4 class="mt-2">@Localizer["Loading"]...</h4>
    }
</div>

<!--Full page loading screen-->
<FullpageLoadingScreen IsDisplayed="isFullPageLoadingScreenDisplayed" />

<!--Manual identification modal-->
<div class="modal" tabindex="-1" role="dialog" id="manualIdentificationModal" aria-hidden="true" aria-labelledby="manualIdentificationModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Manual document identification</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" title="@Localizer["Close"]" disabled="@isManualIdentificationButtonDisabled">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <select class="form-control" @bind="manualTemplateId" title="Select a template">
                    <option value="">Select a template</option>
                    @if (templates != null)
                    {
                        @foreach (var template in templates)
                        {
                            <option value="@template.ID">@template.Name</option>
                        }
                    }
                </select>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" disabled="@isManualIdentificationButtonDisabled" @onclick="ManuallyIdentifyDocument">
                    <span class="oi oi-check"></span> Manually identify
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" title="@Localizer["Close"]" disabled="@isManualIdentificationButtonDisabled">
                    @Localizer["Close"]
                </button>
            </div>
        </div>
    </div>
</div>

@code
{
    /// <summary>
    /// ID of a queue that is going to be processed.
    /// </summary>
    [Parameter]
    public string QueueID { get; set; }

    /// <summary>
    /// Queue that is being processed.
    /// </summary>
    private Queue queue;

    /// <summary>
    /// List of processed files (see: <see cref="ProcessedFile"/> class).
    /// </summary>
    private List<ProcessedFile> processedFiles;

    /// <summary>
    /// List of workflow tasks made by the user for scan portion of document processing.
    /// </summary>
    private List<WorkflowTask> customTasks = new List<WorkflowTask>();

    /// <summary>
    /// List of fields.
    /// </summary>
    private List<Field> fields;

    /// <summary>
    /// List of templates.
    /// </summary>
    private List<Template> templates;

    /// <summary>
    /// List of <see cref="FieldValue"/> instances.
    /// </summary>
    private List<FieldValue> fieldValues = new List<FieldValue>();

    /// <summary>
    /// Private field indicating if full page loading screen is displayed.
    /// </summary>
    private bool isFullPageLoadingScreenDisplayed;

    /// <summary>
    /// Field with value for disabling button for manual identification.
    /// </summary>
    private bool isManualIdentificationButtonDisabled = false;

    /// <summary>
    /// ID of the manually selected template.
    /// </summary>
    private string manualTemplateId;

    /// <summary>
    /// File that has been selected by the user and is unidentified.
    /// </summary>
    private ProcessedFile unidentifiedFile;

    /// <summary>
    /// Event handler for submit button on this page.
    /// </summary>
    /// <returns>A <see cref="Task"/> representing any asynchronous operation.</returns>
    private async Task Submit()
    {
        await Task.Delay(10);
        foreach (var value in fieldValues)
        {
            Console.WriteLine($"{fields.Single(i => i.ID.Equals(value.FieldID)).Name} - {value.Value}");
        }
    }

    /// <summary>
    /// Method for toggling full page loading screen.
    /// </summary>
    /// <param name="isDisplayed">Parameter indicating if loading screen is displayed or not.</param>
    /// <returns>A <see cref="Task"/> representing any asynchronous operation.</returns>
    private async Task ToggleFullPageLoadingScreen(bool isDisplayed)
    {
        isFullPageLoadingScreenDisplayed = isDisplayed;
        if (isDisplayed)
        {
            await IJSRuntime.InvokeVoidAsync("displayFullPageLoadingScreen");
        }
        else
        {
            await IJSRuntime.InvokeVoidAsync("hideFullPageLoadingScreen");
        }
    }

    /// <summary>
    /// Method for setting an unidentified file for manual identification.
    /// </summary>
    /// <param name="file">File that is unidentified.</param>
    private void SelectUnidentifiedFile(ProcessedFile file)
    {
        if (file.TemplateID == null)
        {
            unidentifiedFile = file;
        }
    }

    /// <summary>
    /// Method for manual fix of unidentified document.
    /// </summary>
    /// <returns>A <see cref="Task"/> representing any asynchronous operation.</returns>
    private async Task ManuallyIdentifyDocument()
    {
        if (!string.IsNullOrEmpty(manualTemplateId) && unidentifiedFile != null)
        {
            isManualIdentificationButtonDisabled = true;
            //Identify document
            unidentifiedFile.TemplateID = manualTemplateId;
            await Task.Delay(100);
            _ = await DataAccess.UpdateItem(unidentifiedFile, ObjectStores.ProcessedFiles.ToString());
            //Run recognition
            var results = await TesseractService.SingleFileMultipleFieldsRecognition(fields.Where(i => i.TemplateID.Equals(manualTemplateId) && !i.IsIdentifying).ToList(), unidentifiedFile.BlackAndWhiteContent, queue.Locale, unidentifiedFile.ContentType);
            FieldValue value;
            foreach (var res in results)
            {
                value = new FieldValue()
                {
                    ID = Guid.NewGuid().ToString(),
                    FileID = unidentifiedFile.ID,
                    FieldID = res[1],
                    Value = res[0],
                    Added = DateTime.Now,
                    Updated = DateTime.Now
                };
                _ = await DataAccess.AddItem(value, ObjectStores.FieldValues.ToString());
                fieldValues.Add(value);
            }
            isManualIdentificationButtonDisabled = false;
            await IJSRuntime.InvokeVoidAsync("hideModal");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ToggleFullPageLoadingScreen(true);
        queue = await DataAccess.GetItem<Queue>(QueueID, ObjectStores.Queues.ToString());
        if (queue != null)
        {
            //Get processed files
            processedFiles = await DataAccess.GetItemsAsList<ProcessedFile>(ObjectStores.ProcessedFiles.ToString());
            if (processedFiles != null)
            {
                processedFiles = processedFiles.Where(i => i.QueueID.Equals(QueueID)).ToList();
                //If workflow id is set retrieve groupings and potential tasks
                if (!string.IsNullOrEmpty(queue.WorkflowID))
                {
                    //Get workflow-task groupings
                    var workflowTaskGroupings = await DataAccess.GetItemsAsList<WorkflowTaskGrouping>(ObjectStores.WorkflowTaskGroupings.ToString());
                    //Filter workflow-task groupings that are not part of selected workflow and are not for scan
                    workflowTaskGroupings = workflowTaskGroupings
                        .Where(i => i.WorkflowID.Equals(queue.WorkflowID) && i.TaskGroupName.Equals($"{QueueTask.Verification}"))
                        .OrderBy(i => i.ExecutionOrderNumber)
                        .ToList();
                    //Workflow does not need to have any tasks => check needed
                    if (workflowTaskGroupings.Count > 0)
                    {
                        //Get all tasks
                        var allTasks = await DataAccess.GetItemsAsList<WorkflowTask>(ObjectStores.WorkflowTasks.ToString());
                        foreach (var grouping in workflowTaskGroupings)
                        {
                            //Add task that corresponds with TaskID in the grouping
                            customTasks.Add(allTasks.Single(i => i.ID.Equals(grouping.TaskID)));
                        }
                    }
                }
                //Get fields and field values
                fields = await DataAccess.GetItemsAsList<Field>(ObjectStores.Fields.ToString());
                fieldValues = await DataAccess.GetItemsAsList<FieldValue>(ObjectStores.FieldValues.ToString());
                templates = await DataAccess.GetItemsAsList<Template>(ObjectStores.Templates.ToString());
                if (fields != null && fieldValues != null && templates != null)
                {
                    fields = fields.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
                    templates = templates.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/NotFound");
        }
        await ToggleFullPageLoadingScreen(false);
    }
}