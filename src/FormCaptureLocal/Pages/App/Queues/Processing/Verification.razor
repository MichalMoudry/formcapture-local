@layout AppLayout
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject DataAccess DataAccess
@inject IJSRuntime IJSRuntime
@inject TesseractService TesseractService
@inject AlertService AlertService
@page "/formcapture/queues/{queueID}/verification"

<div class="jumbotron">
    <h4 class="display-4"><span class="fluentUiGlyph">&#xE969;</span>  @Localizer["VerificationNoun"]</h4>

    <!--Identification results-->
    <p class="lead"><span class="fluentUiGlyph mr-1">&#xEA1E;</span>  @Localizer["VerificationPageLead1Text"]:</p>
    @if (processedFiles != null && templates != null)
    {
        @foreach (var file in processedFiles)
        {
            <div class="quickPreviewItem mr-3">
                <img src="data:{@file.ContentType};base64,@Convert.ToBase64String(file.Content)" alt="@file.Name" id="@file.ID" class="quickPreviewImage figure-img img-fluid rounded" draggable="false" />
                @if (file.TemplateID != null)
                {
                    <span class="verificationIdResult rounded">@templates.Single(i => i.ID.Equals(file.TemplateID)).Name</span>
                }
                else
                {
                    <span class="verificationIdResult rounded">Unidentified</span>
                }
            </div>
        }
    }
    <hr class="my-4" />

    <!--Recognition results-->
    <p class="lead"><span class="fluentUiGlyph mr-1">&#xEB4E;</span>  @Localizer["VerificationPageLead2Text"]:</p>
    <hr class="my-4" />

    <!--Custom tasks display-->
    <p class="lead"><span class="oi oi-code mr-1"></span> @Localizer["VerificationPageLead3Text"]:</p>
    <ul class="list-group">
        <li class="list-group-item list-group-item-primary">1. @Localizer["VerificationPageFirstOperationDescription"]</li>
        @if (queue != null)
        {
            @if (customTasks != null && !queue.IsAutomatic)
            {
                @if (customTasks.Count > 0)
                {
                    @foreach (var task in customTasks)
                    {
                        <li class="list-group-item list-group-item-primary">@(customTasks.IndexOf(task) + 2). @task.Name - @task.Description</li>
                    }
                }
            }
        }
    </ul>

    @if (queue != null)
    {
        @if (!queue.IsAutomatic)
        {
            <hr class="my-4" />
            <p class="lead mt-3">@Localizer["VerificationPageLead4Text"].</p>
            <hr class="my-4" />
            <button class="btn btn-outline-primary btn-lg btn-block" data-toggle="tooltip" role="button" title="@Localizer["VerificationPageLaunchTaskButtonText"]">
                <span class="oi oi-play-circle mr-2"></span> @Localizer["VerificationPageLaunchTaskButtonText"]
            </button>
        }
    }
    else
    {
        <h4 class="mt-2">@Localizer["Loading"]...</h4>
    }
</div>

<!--Full page loading screen-->
<div id="fullPageLoadingScreen" class="@FullPageLoadingScreenCssClass">
    <div class="d-flex justify-content-center main-loading-div">
        @Localizer["Loading"]...
        <div class="spinner-border mt-4" role="status">
            <span class="sr-only">@Localizer["Loading"]...</span>
        </div>
    </div>
</div>

@code
{
    /// <summary>
    /// ID of a queue that is going to be processed.
    /// </summary>
    [Parameter]
    public string QueueID { get; set; }

    /// <summary>
    /// Queue that is being processed.
    /// </summary>
    private Queue queue;

    /// <summary>
    /// List of processed files (see: <see cref="ProcessedFile"/> class).
    /// </summary>
    private List<ProcessedFile> processedFiles;

    /// <summary>
    /// List of workflow tasks made by the user for scan portion of document processing.
    /// </summary>
    private List<WorkflowTask> customTasks = new List<WorkflowTask>();

    /// <summary>
    /// List of fields.
    /// </summary>
    private List<Field> fields;

    /// <summary>
    /// List of templates.
    /// </summary>
    private List<Template> templates;

    /// <summary>
    /// List of <see cref="FieldValue"/> instances.
    /// </summary>
    private List<FieldValue> fieldValues = new List<FieldValue>();

    /// <summary>
    /// Private field indicating if full page loading screen is displayed.
    /// </summary>
    private bool isFullPageLoadingScreenDisplayed;

    /// <summary>
    /// Private filed for seting and geting value of a CSS class for displaying/hiding fullpage loading screen.
    /// </summary>
    private string FullPageLoadingScreenCssClass => isFullPageLoadingScreenDisplayed ? "d-block" : "d-none";

    protected override async Task OnInitializedAsync()
    {
        isFullPageLoadingScreenDisplayed = true;
        queue = await DataAccess.GetItem<Queue>(QueueID, ObjectStores.Queues.ToString());
        if (queue != null)
        {
            //Get processed files
            processedFiles = await DataAccess.GetItemsAsList<ProcessedFile>(ObjectStores.ProcessedFiles.ToString());
            if (processedFiles != null)
            {
                processedFiles = processedFiles.Where(i => i.QueueID.Equals(QueueID)).ToList();
                //If workflow id is set retrieve groupings and potential tasks
                if (!string.IsNullOrEmpty(queue.WorkflowID))
                {
                    //Get workflow-task groupings
                    var workflowTaskGroupings = await DataAccess.GetItemsAsList<WorkflowTaskGrouping>(ObjectStores.WorkflowTaskGroupings.ToString());
                    //Filter workflow-task groupings that are not part of selected workflow and are not for scan
                    workflowTaskGroupings = workflowTaskGroupings
                        .Where(i => i.WorkflowID.Equals(queue.WorkflowID) && i.TaskGroupName.Equals($"{QueueTask.Verification}"))
                        .OrderBy(i => i.ExecutionOrderNumber)
                        .ToList();
                    //Workflow does not need to have any tasks => check needed
                    if (workflowTaskGroupings.Count > 0)
                    {
                        //Get all tasks
                        var allTasks = await DataAccess.GetItemsAsList<WorkflowTask>(ObjectStores.WorkflowTasks.ToString());
                        foreach (var grouping in workflowTaskGroupings)
                        {
                            //Add task that corresponds with TaskID in the grouping
                            customTasks.Add(allTasks.Single(i => i.ID.Equals(grouping.TaskID)));
                        }
                    }
                }
                //Get fields and field values
                fields = await DataAccess.GetItemsAsList<Field>(ObjectStores.Fields.ToString());
                fieldValues = await DataAccess.GetItemsAsList<FieldValue>(ObjectStores.FieldValues.ToString());
                templates = await DataAccess.GetItemsAsList<Template>(ObjectStores.Templates.ToString());
                if (fields != null && fieldValues != null && templates != null)
                {
                    fields = fields.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
                    templates = templates.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/NotFound");
        }
        isFullPageLoadingScreenDisplayed = false;
    }
}