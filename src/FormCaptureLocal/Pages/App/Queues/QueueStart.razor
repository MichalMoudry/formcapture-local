@layout AppLayout
@inject NavigationManager NavigationManager
@inject DataAccess DataAccess
@inject AlertService AlertService
@inject IStringLocalizer<App> Localizer
@inject ILocalStorageService localStorage
@inject IJSRuntime IJSRuntime
@page "/formcapture/queues/start"

<h3><span class="oi oi-play-circle mr-1"></span> @Localizer["QueueStartPageTitle"]</h3>

<hr />

<!--Queue name-->
<div class="settingPanel">
    <label for="queue-name"><b>@Localizer["QueueNameInputLabel"]</b>:</label>
    <input type="text" name="queue-name" id="queue-name" placeholder="@Localizer["QueueNameInputPlaceholder"]..." @bind-value="queue.Name" class="form-control" />
    <hr />
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="isQueueAutomatic" @bind-value="queue.IsAutomatic">
        <label class="form-check-label w-100 pointer" for="isQueueAutomatic">
            <b>Process queue automatically</b> (without user intervention)
        </label>
    </div>
</div>

<!--File upload-->
<div class="settingPanel mt-4">
    <h4><span class="oi oi-data-transfer-upload mr-1"></span> @Localizer["QueueStartPageUploadFilesTitle"]</h4>
    <InputFile multiple OnChange="@FileSelected" title="@Localizer["InputFileMultipleFilesTitle"]" />
    <!--Files quick preview-->
    @if (processedFiles.Count > 0)
    {
        <h5 class="mt-3"><span class="oi oi-eye"></span> @Localizer["QueueStartPageQueuePreviewTitle"]</h5>
        <div id="queueQuickPreview" class="mt-1">
            @foreach (var file in processedFiles)
            {
                <div class="quickPreviewItem mr-3">
                    <img src="data:{@file.ContentType};base64,@Convert.ToBase64String(file.Content)" alt="@file.Name" id="@file.ID" class="quickPreviewImage" draggable="false" />
                    <button type="button" class="btn btn-outline-danger removeImageButton" aria-label="Close" title="@Localizer["RemoveImage"]" @onclick="@(e => RemoveFile(file))">
                        <span class="oi oi-trash"></span> @Localizer["Remove"]
                    </button>
                </div>
            }
        </div>
    }
    <p class="mt-2 mb- @FileLoadingIndicatorCssClass">@Localizer["Loading"]...</p>
</div>

<!--Worflow selection-->
<div class="settingPanel mt-4">
    <h4><span class="oi oi-project mr-1"></span> <b>@Localizer["Optional"]</b>: @Localizer["QueueStartSelectWorkflowTitle"]</h4>
    <select class="form-control" title="@Localizer["QueueStartPageWorkflowSelectTitle"]" @bind="workflowID">
        <option value="">@Localizer["QueueStartPageWorkflowSelectTitle"]</option>
        @if (workflows != null)
        {
            @foreach (var workflow in workflows)
            {
                <option value="@workflow.ID">@workflow.Name</option>
            }
        }
    </select>
</div>

<!--Locale selection-->
<div class="settingPanel mt-4">
    <h4><span class="oi oi-globe mr-1"></span> <b>@Localizer["Optional"]</b>: @Localizer["QueueStartSelectLocaleTitle"]</h4>
    <select @bind="defaultLocale" class="form-control" title="@Localizer["SettingsPageDefaultLocaleSelectTitle"]">
        <option value="eng">en-US</option>
        <option value="ces">cz-CS</option>
    </select>
</div>

<button class="btn btn-outline-success mt-4 mb-4" title="@Localizer["QueueStartPageSubmitButtonText"]" @onclick="Submit">
    <span class="oi oi-check"></span> @Localizer["QueueStartPageSubmitButtonText"]
</button>

<div class="toast-area">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="error-toast" role="alert">
        <strong class="mr-auto">@Localizer["Error"]</strong>
        <hr />
        <p class="errorMessage">@errorMessage</p>
        <button type="button" class="close" onclick="closeAlert('error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="alert alert-danger alert-dismissible fade show d-none" id="no-templates-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["Error"]</strong>
        <hr />
        <p class="errorMessage">
            @Localizer["QueueStartPageNoTemplatesErrorMessage"]. <a href='/formcapture/templates/add' title="@Localizer["TemplatesListPageAddButtonText"]" class="alert-link">@Localizer["TemplatesListPageAddButtonText"]</a>.
        </p>
        <button type="button" class="close" onclick="closeAlert('no-templates-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    //A workflow must be selected.
    /// <summary>
    /// Field for setting or getting values of error messages.
    /// </summary>
    private string errorMessage;

    /// <summary>
    /// Default locale of document processing.
    /// </summary>
    private string defaultLocale;

    /// <summary>
    /// ID of optional workflow for document processing.
    /// </summary>
    private string workflowID;

    /// <summary>
    /// Queue that will be processed.
    /// </summary>
    private Queue queue = new Queue() { ID = Guid.NewGuid().ToString() };

    /// <summary>
    /// List of processed files (see: <see cref="ProcessedFile"/> class).
    /// </summary>
    private List<ProcessedFile> processedFiles = new List<ProcessedFile>();

    /// <summary>
    /// List of workflows from which user can optionaly select one.
    /// </summary>
    private List<Workflow> workflows;

    /// <summary>
    /// Field for displaying/hiding file loading indicator.
    /// </summary>
    private bool isFileLoadingIndicatorDisplayed = false;

    /// <summary>
    /// Field containing CSS class for hiding/displaying file loading indicator.
    /// </summary>
    private string FileLoadingIndicatorCssClass => isFileLoadingIndicatorDisplayed ? "d-block" : "d-none";

    /// <summary>
    /// Event handler for @onchange event of InputFile component.
    /// </summary>
    /// <param name="e">InputFile @onchange event parameters.</param>
    /// <returns>Task.</returns>
    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0)
        {
            errorMessage = $"{Localizer["QueueStartPageNoFileErrorMessage"]}.";
            await AlertService.DisplayToast("error-toast");
            return;
        }
        isFileLoadingIndicatorDisplayed = true;
        ProcessedFile tempFile;
        byte[] buffer;
        foreach (var file in e.GetMultipleFiles())
        {
            buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            tempFile = new ProcessedFile() { ID = Guid.NewGuid().ToString(), QueueID = queue.ID, Content = buffer, ContentType = file.ContentType, Type = file.ContentType, Name = file.Name, Added = DateTime.Now, Updated = DateTime.Now };
            processedFiles.Add(tempFile);
        }
        isFileLoadingIndicatorDisplayed = false;
    }

    /// <summary>
    /// Event handler for button, that is used to remove file from queue.
    /// </summary>
    /// <param name="file">File that will be removed.</param>
    private void RemoveFile(ProcessedFile file)
    {
        processedFiles.Remove(file);
    }

    /// <summary>
    /// Event handler for submit button.
    /// </summary>
    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(workflowID))
        {
            queue.WorkflowID = workflowID;
        }
        var templates = await DataAccess.GetItemsAsList<Template>(ObjectStores.Templates.ToString());
        if (!string.IsNullOrEmpty(defaultLocale) && processedFiles.Count > 0 && !string.IsNullOrEmpty(queue.Name) && templates.Count > 0)
        {
            queue.UserID = UserHelper.UserID;
            queue.Added = DateTime.Now;
            queue.Updated = DateTime.Now;
            if (defaultLocale != null)
            {
                queue.Locale = defaultLocale;
            }
            //If parse fails use english locale.
            else
            {
                queue.Locale = Locale.eng.ToString();
            }
            var addQueueRes = await DataAccess.AddItem(queue, ObjectStores.Queues.ToString());
            bool addProcessedFilesRes = false;
            foreach (var file in processedFiles)
            {
                addProcessedFilesRes = await DataAccess.AddItem(file, ObjectStores.ProcessedFiles.ToString());
            }
            if (addProcessedFilesRes && addQueueRes)
            {
                NavigationManager.NavigateTo($"/formcapture/queues/{queue.ID}/scan");
            }
        }
        else if (templates.Count == 0)
        {
            await AlertService.DisplayToast("no-templates-error-toast");
        }
        else if (string.IsNullOrEmpty(queue.Name))
        {
            errorMessage = $"{Localizer["QueueStartPageEmptyQueueNameErrorMesssage"]}.";
            await AlertService.DisplayToast("error-toast");
        }
        else if (processedFiles.Count == 0)
        {
            errorMessage = $"{Localizer["QueueStartPageNoFileErrorMessage"]}.";
            await AlertService.DisplayToast("error-toast");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        defaultLocale = await localStorage.GetItemAsStringAsync(Setting.DefaultLocale.ToString());
        defaultLocale = defaultLocale.Replace("\"", "");
        workflows = await DataAccess.GetItemsAsList<Workflow>(ObjectStores.Workflows.ToString());
        if (workflows != null)
        {
            workflows = workflows.Where(i => i.UserID.Equals(UserHelper.UserID)).OrderBy(i => i.Added).ToList();
        }
    }
}