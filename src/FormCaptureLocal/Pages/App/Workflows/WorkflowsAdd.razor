@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject DataAccess DataAccess
@inject AlertService AlertService
@inject IStringLocalizer<App> Localizer
@page "/formcapture/workflows/add"

<h3><span class="oi oi-plus mr-1"></span> @Localizer["WorkflowsAddPageTitle"]</h3>

<hr />

<div class="form-group">
    <label for="workflow-name">@Localizer["WorkflowNameInputLabel"]:</label>
    <input name="workflow-name" @bind-value="workflow.Name" placeholder="@Localizer["WorkflowNameInputPlaceholder"]..." id="workflow-name" type="text" class="form-control" />
</div>

<!--Scan tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph workflowPagesH4Glyph h4FluentGlyph mr-2">&#xEA00;</span> @Localizer["ScanTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings[$"{QueueTask.Scan}"].Count != 0)
        {
            @foreach (var grouping in groupings[$"{QueueTask.Scan}"])
            {
                <p class="card-text">
                    <span class="badge badge-success">
                        @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings[$"{QueueTask.Scan}"], grouping))"></span>
                    </span>
                </p>
            }
        }
        else
        {
            <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup($"{QueueTask.Scan}"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsScanTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Identification tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph workflowPagesH4Glyph h4FluentGlyph mr-2">&#xEA1E;</span> @Localizer["IdentificationTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings[$"{QueueTask.Identification}"].Count > 0)
        {
            @foreach (var grouping in groupings[$"{QueueTask.Identification}"])
            {
                <p class="card-text">
                    <span class="badge badge-success">
                        @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings[$"{QueueTask.Identification}"], grouping))"></span>
                    </span>
                </p>
            }
        }
        else
        {
            <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup($"{QueueTask.Identification}"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsIdentificationTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Recognition tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph workflowPagesH4Glyph mr-2">&#xEB4E;</span> @Localizer["RecognitionTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings[$"{QueueTask.Recognition}"].Count != 0)
        {
            @foreach (var grouping in groupings[$"{QueueTask.Recognition}"])
            {
                <p class="card-text">
                    <span class="badge badge-success">
                        @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings[$"{QueueTask.Recognition}"], grouping))"></span>
                    </span>
                </p>
            }
        }
        else
        {
            <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup($"{QueueTask.Recognition}"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsRecognitionTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Verification tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph workflowPagesH4Glyph mr-2">&#xE969;</span> @Localizer["VerificationTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings[$"{QueueTask.Verification}"].Count != 0)
        {
            @foreach (var grouping in groupings[$"{QueueTask.Verification}"])
            {
                <p class="card-text">
                    <span class="badge badge-success">
                        @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings[$"{QueueTask.Verification}"], grouping))"></span>
                    </span>
                </p>
            }
        }
        else
        {
            <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup($"{QueueTask.Verification}"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsVerificationTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<!--Export tasks block-->
<div class="card workflowCard mt-4">
    <div class="card-header">
        <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph workflowPagesH4Glyph mr-2">&#xE9B9;</span> @Localizer["ExportTasksCardHeader"]</h4>
    </div>

    <div class="card-body">
        @if (groupings[$"{QueueTask.Export}"].Count != 0)
        {
            @foreach (var grouping in groupings[$"{QueueTask.Export}"])
            {
                <p class="card-text">
                    <span class="badge badge-success">
                        @tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x ml-2 pointer" @onclick="@(e => RemoveTaskFromGrouping(groupings[$"{QueueTask.Export}"], grouping))"></span>
                    </span>
                </p>
            }
        }
        else
        {
            <p class="card-text">@Localizer["TaskGroupNoTasksMessage"].</p>
        }
    </div>

    <div class="card-footer">
        <button class="btn btn-outline-primary" @onclick="@(e => SetCurrentTaskGroup($"{QueueTask.Export}"))" data-toggle="modal" data-target="#add-tasks-dialog" title="@Localizer["WorkflowsExportTasksAddButtonTitle"]">
            <span class="oi oi-plus"></span> @Localizer["WorkflowsAddButtonText"]
        </button>
    </div>
</div>

<div class="mt-4 mb-4">
    <button type="button" class="btn btn-outline-success" @onclick="Submit" title="@Localizer["WorkflowsAddSubmitButtonTitle"]">
        <span class="oi oi-check mr-1"></span> @Localizer["Submit"]
    </button>
</div>

<div class="toast-area">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="workflow-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["Error"]</strong>
        <hr />
        <p>@Localizer["WorkflowNameEmptyInputErrorMessage"].</p>
        <button type="button" class="close" onclick="hideToast('workflow-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

<!--Modal for adding tasks-->
<div class="modal" id="add-tasks-dialog" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Localizer["AddTasksToGroupModalTitlePart1"] @currentTaskGroup @Localizer["AddTasksToGroupModalTitlePart2"]</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                @if (tasks == null)
                {
                    <p>@Localizer["Loading"]...</p>
                }
                else
                {
                    @if (tasks.Count != 0)
                    {
                        <form>
                            <fieldset class="form-group">
                                @foreach (WorkflowTask task in tasks)
                                {
                                    <div class="form-check mt-2">
                                        <input class="form-check-input" @onchange="eventArgs => { CheckboxClicked(task, eventArgs.Value); }" type="checkbox" id="@task.ID" />
                                        <label class="form-check-label pointer w-100" for="@task.ID">@task.Name</label>
                                    </div>
                                }
                            </fieldset>
                        </form>
                    }
                    else
                    {
                        <p>
                            @Localizer["AddTasksToGroupModalNoTasksMessage"] <a href="/formcapture/tasks/add" title="@Localizer["AddTaskLinkTitle"]"><span class="oi oi-external-link"></span> @Localizer["AddTaskLinkTitle"]</a>
                        </p>
                    }
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="ConfirmModal" title="@Localizer["Submit"]">
                    <span class="oi oi-check mr-1"></span> @Localizer["Submit"]
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal" title="@Localizer["Close"]">
                    <span class="oi oi-x mr-1"></span> @Localizer["Close"]
                </button>
            </div>
        </div>
    </div>
</div>

@code
{
    /// <summary>
    /// Field that contains groupings for each workflow group.
    /// </summary>
    private Dictionary<string, List<WorkflowTaskGrouping>> groupings;

    /// <summary>
    /// Field that contains all user's tasks.
    /// </summary>
    private List<WorkflowTask> tasks;

    private Workflow workflow = new Workflow() { ID = Guid.NewGuid().ToString(), UserID = UserHelper.UserID };

    private string currentTaskGroup;

    private List<WorkflowTask> addedTasks;

    private void SetCurrentTaskGroup(string taskGroup)
    {
        currentTaskGroup = taskGroup;
        addedTasks = new List<WorkflowTask>();
    }

    private void CheckboxClicked(WorkflowTask task, object value)
    {
        if ((bool)value)
        {
            addedTasks.Add(task);
        }
        else
        {
            addedTasks.Remove(task);
        }
    }

    private void RemoveTaskFromGrouping(List<WorkflowTaskGrouping> groupings, WorkflowTaskGrouping grouping)
    {
        groupings.Remove(grouping);
    }

    private async Task ConfirmModal()
    {
        var ids = new List<string>();
        foreach (WorkflowTask task in addedTasks)
        {
            groupings[currentTaskGroup].Add(new WorkflowTaskGrouping()
            {
                ID = Guid.NewGuid().ToString(),
                TaskGroupName = currentTaskGroup,
                TaskID = task.ID,
                Added = DateTime.Now,
                Updated = DateTime.Now,
                ExecutionOrderNumber = groupings[currentTaskGroup].IndexOf(groupings[currentTaskGroup].LastOrDefault()) + 1,
                WorkflowID = workflow.ID
            });
            ids.Add(task.ID);
        }
        await IJSRuntime.InvokeVoidAsync("uncheckCheckboxes", ids);
        ids.Clear();
        addedTasks.Clear();
    }

    private async Task CloseModal()
    {
        var ids = new List<string>();
        foreach (WorkflowTask task in addedTasks)
        {
            ids.Add(task.ID);
        }
        await IJSRuntime.InvokeVoidAsync("uncheckCheckboxes", ids);
        ids.Clear();
        addedTasks.Clear();
    }

    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(workflow.Name) && (groupings[$"{QueueTask.Scan}"].Count > 0 || groupings["scan"].Count > 0))
        {
            workflow.Added = DateTime.Now;
            workflow.Updated = workflow.Added;
            var addWorkflowRes = await DataAccess.AddItem(workflow, ObjectStores.Workflows.ToString());
            var addGroupingsRes = false;
            foreach (var item in groupings)
            {
                foreach (var grouping in item.Value)
                {
                    addGroupingsRes = await DataAccess.AddItem(grouping, ObjectStores.WorkflowTaskGroupings.ToString());
                }
            }
            if (addWorkflowRes && addGroupingsRes)
            {
                NavigationManager.NavigateTo("/formcapture/workflows");
            }
        }
        else
        {
            await AlertService.DisplayToast("workflow-error-toast");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        groupings = new Dictionary<string, List<WorkflowTaskGrouping>>();
        groupings.Add(QueueTask.Export.ToString(), new List<WorkflowTaskGrouping>());
        groupings.Add(QueueTask.Scan.ToString(), new List<WorkflowTaskGrouping>());
        groupings.Add(QueueTask.Verification.ToString(), new List<WorkflowTaskGrouping>());
        groupings.Add(QueueTask.Recognition.ToString(), new List<WorkflowTaskGrouping>());
        groupings.Add(QueueTask.Identification.ToString(), new List<WorkflowTaskGrouping>());
        tasks = await DataAccess.GetItemsAsList<WorkflowTask>(ObjectStores.WorkflowTasks.ToString());
        if (tasks != null)
        {
            tasks = tasks.Where(i => i.UserID.Equals(UserHelper.UserID)).ToList();
        }
    }
}