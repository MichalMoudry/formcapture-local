@layout AppLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject IStringLocalizer<App> Localizer
@inject DataAccess DataAccess
@inject AlertService AlertService
@page "/formcapture/tasks/edit/{taskID}"


@if (workflowTask != null)
{
    <h3><span class="fluentUiGlyph tableFluentGlyph h3FluentGlyph mr-2">&#xEA39;</span> @Localizer["Edit"] '@taskName'</h3>
}
else
{
    <h3>@Localizer["Loading"]...</h3>
}

<hr />

<div class="form-group settingPanel">
    <label for="task-name"><b>@Localizer["TaskNameInputLabel"]</b>:</label>
    @if (workflowTask != null)
    {
        <input type="text" name="task-name" id="task-name" placeholder="@Localizer["TaskNameInputPlaceholder"]..." @bind-value="workflowTask.Name" class="form-control" />
    }
</div>

<div class="form-group settingPanel mt-4">
    <label for="task-description"><b>@Localizer["TaskDescriptionInputLabel"]</b>:</label>
    @if (workflowTask != null)
    {
        <input type="text" name="task-description" id="task-description" placeholder="@Localizer["TaskDescriptionInputPlaceholder"]..." @bind-value="workflowTask.Description" class="form-control" />
    }
</div>

<div class="form-group settingPanel mt-4">
    <label for="task-content"><b>@Localizer["TaskContentInputLabel"]</b>:</label>
    <textarea @bind="taskContent" placeholder="@Localizer["TaskContentInputPlaceholder"]..." name="task-content" id="task-content" class="form-control mb-2">
    </textarea>
    <a href="#" title="@Localizer["TasksAddPageWhatIsContentLinkText"]?" target="_blank">@Localizer["TasksAddPageWhatIsContentLinkText"]?</a>
</div>

<div class="form-group d-flex">
    <button @onclick="ConfirmForm" class="btn btn-success mr-3 mt-2" title="@Localizer["TasksAddPageSubmitButtonTitle"]" id="submitButton">
        <span class="oi oi-check mr-1"></span> @Localizer["Submit"]
    </button>
    <button @onclick="TestTaskContent" class="btn btn-warning mt-2" title="@Localizer["TasksAddPageTestTaskButtonTitle"]" id="testButton">
        <span class="oi oi-beaker mr-1"></span> @Localizer["TasksAddPageTestTaskButtonText"]
    </button>
</div>

<div class="toast-area">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="error-toast" role="alert">
        <strong class="mr-auto">@Localizer["Error"]</strong>
        <hr />
        <p class="errorMessage">@errorMessage</p>
        <button type="button" class="close" onclick="hideToast('error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    [Parameter]
    public string TaskID { get; set; }

    /// <summary>
    /// Workflow task that will be edited.
    /// </summary>
    private WorkflowTask workflowTask;

    private string errorMessage;

    /// <summary>
    /// Name of the edited task.
    /// </summary>
    private string taskName;

    /// <summary>
    /// Page field that contains content of the task.
    /// </summary>
    private string taskContent;

    private async void TestTaskContent()
    {
        if (!string.IsNullOrEmpty(taskContent))
        {
            var res = await IJSRuntime.InvokeAsync<bool>("executeJS", taskContent);
        }
        else
        {
            errorMessage = $"{Localizer["TasksAddPageEmptyTaskContentErrorMessage"]}.";
            await AlertService.DisplayToast("error-toast");
        }
    }

    private async Task ConfirmForm()
    {
        if (!string.IsNullOrEmpty(taskContent) && !string.IsNullOrEmpty(workflowTask.Name))
        {
            workflowTask.Content = taskContent;
            workflowTask.Updated = DateTime.Now;
            var res = await DataAccess.UpdateItem(workflowTask, ObjectStores.WorkflowTasks.ToString());
            if (res)
            {
                NavigationManager.NavigateTo("/formcapture/tasks");
            }
        }
        else if (string.IsNullOrEmpty(workflowTask.Name))
        {
            errorMessage = $"{Localizer["TasksAddPageEmptyTaskNameErrorMessage"]}.";
            await AlertService.DisplayToast("error-toast");
        }
        else if (string.IsNullOrEmpty(taskContent))
        {
            errorMessage = $"{Localizer["TasksAddPageEmptyTaskContentErrorMessage"]}.";
            await AlertService.DisplayToast("error-toast");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        workflowTask = await DataAccess.GetItem<WorkflowTask>(TaskID, ObjectStores.WorkflowTasks.ToString());
        if (workflowTask != null)
        {
            taskName = workflowTask.Name;
            taskContent = workflowTask.Content;
        }
        else
        {
            NavigationManager.NavigateTo("/NotFound");
        }
    }
}