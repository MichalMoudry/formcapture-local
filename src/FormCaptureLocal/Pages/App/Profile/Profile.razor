@layout AppLayout
@inject NavigationManager NavigationManager
@inject DataAccess DataAccess
@inject AlertService AlertService
@inject IJSRuntime IJSRuntime
@inject IStringLocalizer<App> Localizer
@page "/formcapture/profile"

<h3><span class="fluentUiGlyph tableFluentGlyph h3FluentGlyph mr-2">&#xEAFD;</span> @Localizer["ProfilePageTitle"] - @UserHelper.UserID</h3>

<hr />

<div class="settingPanel">
    <h4><span class="fluentUiGlyph tableFluentGlyph h4FluentGlyph h4FluentEditGlyph mr-2">&#xE9C3;</span> @Localizer["ProfilePageChangePasswordSettingTitle"]</h4>

    <div class="form-group mt-4">
        <label for="old-password-input"><b>@Localizer["ProfilePageChangeCurrentPassword"]</b>:</label>
        <input type="password" name="old-password-input" id="old-password-input" @bind="oldPassword" class="form-control" placeholder="@Localizer["ProfilePageChangeCurrentPasswordInputPlaceholder"]..." />
    </div>

    <div class="form-group">
        <label for="new-password-input"><b>@Localizer["ProfilePageChangeNewPassword"]</b>:</label>
        <input type="password" name="new-password-input" id="new-password-input" @bind="newPassword" class="form-control" placeholder="@Localizer["ProfilePageChangeNewPasswordInputPlaceholder"]..." />
    </div>

    <button type="button" class="btn btn-outline-success" @onclick="Confirm" id="confirmButton" title="@Localizer["ProfilePageConfirmPasswordChangeButtonText"]">
        <span class="oi oi-pencil mr-1"></span> @Localizer["ProfilePageConfirmPasswordChangeButtonText"]
    </button>
</div>

<div class="toast-area mt-4">
    <div class="alert alert-danger alert-dismissible fade show d-none" id="password-error-toast" role="alert">
        <strong class="mr-auto">@Localizer["FormError"]</strong>
        <hr />
        <p id="errorMessage">@errorMessage</p>
        <button type="button" class="close" onclick="closeAlert('password-error-toast');" aria-label="Close" title="@Localizer["Close"]">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

@code
{
    private string newPassword;

    private string oldPassword;

    /// <summary>
    /// Field for setting or getting values of error messages.
    /// </summary>
    private string errorMessage;

    private async Task Confirm()
    {
        if (!string.IsNullOrEmpty(newPassword) && !string.IsNullOrEmpty(oldPassword))
        {
            var user = await DataAccess.GetItem<User>(UserHelper.UserID, ObjectStores.Users.ToString());
            string userHash = await IJSRuntime.InvokeAsync<string>("hashString", oldPassword, user.PasswordSalt);
            if (userHash.Equals(user.PasswordHash))
            {
                user.PasswordHash = await IJSRuntime.InvokeAsync<string>("hashString", newPassword, user.PasswordSalt);
                var res = await DataAccess.UpdateItem(user, ObjectStores.Users.ToString());
                if (res)
                {
                    NavigationManager.NavigateTo("/logout");
                }
                else
                {
                    errorMessage = $"{Localizer["DbError"]}.";
                    await AlertService.DisplayToast("password-error-toast");
                }
            }
            else
            {
                errorMessage = $"{Localizer["ProfilePageUpdatePasswordFormIncorrectPasswordErrorMessage"]}.";
                await AlertService.DisplayToast("password-error-toast");
            }
        }
        else
        {
            errorMessage = $"{Localizer["ProfilePageEmptyUpdatePasswordFormErrorMessage"]}.";
            await AlertService.DisplayToast("password-error-toast");
        }
    }
}